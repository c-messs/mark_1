# Selects
# ------

# Select - SbmFileProcessingSummary
MATCH_FILE_PROC_SUM = SELECT sfps.SBMFILEPROCESSINGSUMMARYID, sfps.TOTALISSUERFILECNT, sfps.TOTALRECORDPROCESSEDCNT, sfps.TOTALRECORDREJECTEDCNT, sfps.ERRORTHRESHOLDPERCENT, sfps.TOTALPREVIOUSPOLICIESNOTSUBMIT, sfps.CMSAPPROVEDIND, sfps.NOTSUBMITTEDEFFECTUATEDCNT, sfps.NOTSUBMITTEDTERMINATEDCNT, sfps.NOTSUBMITTEDCANCELLEDCNT, sfps.ISSUERFILESETID, sfps.ISSUERID, sfps.TENANTID, sfps.CMSAPPROVALREQUIREDIND, sfps.TOTALPOLICYAPPROVEDCNT, sfps.MATCHINGPLCNOCHGCNT, sfps.MATCHINGPLCCHGAPPLCNT, sfps.MATCHINGPLCCORRECTEDCHGAPPLCNT, sfps.NEWPLCCREATEDASSENTCNT, sfps.NEWPLCCREATEDCORRECTIONAPPLCNT, sfps.EFFECTUATEDPOLICYCNT, sfps.COVERAGEYEAR, sfps.SBMFILESTATUSTYPECD, sfps.CREATEDATETIME FROM SBMFILEPROCESSINGSUMMARY sfps JOIN SBMFILEINFO sfi ON sfps.SBMFILEPROCESSINGSUMMARYID = sfi.SBMFILEPROCESSINGSUMMARYID WHERE sfi.SBMFILEID = ? AND sfps.TENANTID = ? ORDER BY sfps.CREATEDATETIME ASC 

FIND_FILE_PROC_SUM = SELECT sfps.SBMFILEPROCESSINGSUMMARYID, sfps.TOTALISSUERFILECNT, sfps.TOTALRECORDPROCESSEDCNT, sfps.TOTALRECORDREJECTEDCNT, sfps.ERRORTHRESHOLDPERCENT, sfps.TOTALPREVIOUSPOLICIESNOTSUBMIT, sfps.CMSAPPROVEDIND, sfps.NOTSUBMITTEDEFFECTUATEDCNT, sfps.NOTSUBMITTEDTERMINATEDCNT, sfps.NOTSUBMITTEDCANCELLEDCNT, sfps.ISSUERFILESETID, sfps.ISSUERID, sfps.TENANTID, sfps.CMSAPPROVALREQUIREDIND, sfps.TOTALPOLICYAPPROVEDCNT, sfps.MATCHINGPLCNOCHGCNT, sfps.MATCHINGPLCCHGAPPLCNT, sfps.MATCHINGPLCCORRECTEDCHGAPPLCNT, sfps.NEWPLCCREATEDASSENTCNT, sfps.NEWPLCCREATEDCORRECTIONAPPLCNT, sfps.EFFECTUATEDPOLICYCNT, sfps.COVERAGEYEAR, sfps.SBMFILESTATUSTYPECD, sfps.CREATEDATETIME FROM SBMFILEPROCESSINGSUMMARY sfps JOIN SBMFILEINFO sfi ON sfps.SBMFILEPROCESSINGSUMMARYID = sfi.SBMFILEPROCESSINGSUMMARYID WHERE sfps.ISSUERID = ? AND sfps.ISSUERFILESETID = ? AND sfps.TENANTID = ? ORDER BY sfps.CREATEDATETIME ASC 
FIND_FILE_PROC_SUM_FILENAME = SELECT sfps.SBMFILEPROCESSINGSUMMARYID, sfps.TOTALISSUERFILECNT, sfps.TOTALRECORDPROCESSEDCNT, sfps.TOTALRECORDREJECTEDCNT, sfps.ERRORTHRESHOLDPERCENT, sfps.TOTALPREVIOUSPOLICIESNOTSUBMIT, sfps.CMSAPPROVEDIND, sfps.NOTSUBMITTEDEFFECTUATEDCNT, sfps.NOTSUBMITTEDTERMINATEDCNT, sfps.NOTSUBMITTEDCANCELLEDCNT, sfps.ISSUERFILESETID, sfps.ISSUERID, sfps.TENANTID, sfps.CMSAPPROVALREQUIREDIND, sfps.TOTALPOLICYAPPROVEDCNT, sfps.MATCHINGPLCNOCHGCNT, sfps.MATCHINGPLCCHGAPPLCNT, sfps.MATCHINGPLCCORRECTEDCHGAPPLCNT, sfps.NEWPLCCREATEDASSENTCNT, sfps.NEWPLCCREATEDCORRECTIONAPPLCNT, sfps.EFFECTUATEDPOLICYCNT, sfps.COVERAGEYEAR, sfps.SBMFILESTATUSTYPECD, sfps.CREATEDATETIME FROM SBMFILEPROCESSINGSUMMARY sfps JOIN SBMFILEINFO sfi ON sfps.SBMFILEPROCESSINGSUMMARYID = sfi.SBMFILEPROCESSINGSUMMARYID WHERE sfi.SBMFILENM = ? ORDER BY sfps.CREATEDATETIME ASC 
FIND_FILE_PROC_SUM_STATUS = SELECT sfps.SBMFILEPROCESSINGSUMMARYID, sfps.TOTALISSUERFILECNT, sfps.TOTALRECORDPROCESSEDCNT, sfps.TOTALRECORDREJECTEDCNT, sfps.ERRORTHRESHOLDPERCENT, sfps.TOTALPREVIOUSPOLICIESNOTSUBMIT, sfps.CMSAPPROVEDIND, sfps.NOTSUBMITTEDEFFECTUATEDCNT, sfps.NOTSUBMITTEDTERMINATEDCNT, sfps.NOTSUBMITTEDCANCELLEDCNT, sfps.ISSUERFILESETID, sfps.ISSUERID, sfps.TENANTID, sfps.CMSAPPROVALREQUIREDIND, sfps.TOTALPOLICYAPPROVEDCNT, sfps.MATCHINGPLCNOCHGCNT, sfps.MATCHINGPLCCHGAPPLCNT, sfps.MATCHINGPLCCORRECTEDCHGAPPLCNT, sfps.NEWPLCCREATEDASSENTCNT, sfps.NEWPLCCREATEDCORRECTIONAPPLCNT, sfps.EFFECTUATEDPOLICYCNT, sfps.COVERAGEYEAR, sfps.SBMFILESTATUSTYPECD, sfps.CREATEDATETIME FROM SBMFILEPROCESSINGSUMMARY sfps WHERE sfps.SBMFILESTATUSTYPECD = ? ORDER BY sfps.CREATEDATETIME ASC 
FIND_FILE_PROC_SUM_STATUS_STATECD = SELECT sfps.SBMFILEPROCESSINGSUMMARYID, sfps.TOTALISSUERFILECNT, sfps.TOTALRECORDPROCESSEDCNT, sfps.TOTALRECORDREJECTEDCNT, sfps.ERRORTHRESHOLDPERCENT, sfps.TOTALPREVIOUSPOLICIESNOTSUBMIT, sfps.CMSAPPROVEDIND, sfps.NOTSUBMITTEDEFFECTUATEDCNT, sfps.NOTSUBMITTEDTERMINATEDCNT, sfps.NOTSUBMITTEDCANCELLEDCNT, sfps.ISSUERFILESETID, sfps.ISSUERID, sfps.TENANTID, sfps.CMSAPPROVALREQUIREDIND, sfps.TOTALPOLICYAPPROVEDCNT, sfps.MATCHINGPLCNOCHGCNT, sfps.MATCHINGPLCCHGAPPLCNT, sfps.MATCHINGPLCCORRECTEDCHGAPPLCNT, sfps.NEWPLCCREATEDASSENTCNT, sfps.NEWPLCCREATEDCORRECTIONAPPLCNT, sfps.EFFECTUATEDPOLICYCNT, sfps.COVERAGEYEAR, sfps.SBMFILESTATUSTYPECD, sfps.CREATEDATETIME FROM SBMFILEPROCESSINGSUMMARY sfps WHERE sfps.SBMFILESTATUSTYPECD IN ('ACC', 'ACE', 'ACW', 'IPC') AND sfps.TENANTID LIKE ? ORDER BY sfps.CREATEDATETIME ASC  

SELECT_FILE_PROC_SUM = SELECT SBMFILEPROCESSINGSUMMARYID, TOTALISSUERFILECNT, TOTALRECORDPROCESSEDCNT, TOTALRECORDREJECTEDCNT, ERRORTHRESHOLDPERCENT, TOTALPREVIOUSPOLICIESNOTSUBMIT, CMSAPPROVEDIND, NOTSUBMITTEDEFFECTUATEDCNT, NOTSUBMITTEDTERMINATEDCNT, NOTSUBMITTEDCANCELLEDCNT, ISSUERFILESETID, ISSUERID, TENANTID, CMSAPPROVALREQUIREDIND, TOTALPOLICYAPPROVEDCNT, MATCHINGPLCNOCHGCNT, MATCHINGPLCCHGAPPLCNT, MATCHINGPLCCORRECTEDCHGAPPLCNT, NEWPLCCREATEDASSENTCNT, NEWPLCCREATEDCORRECTIONAPPLCNT, EFFECTUATEDPOLICYCNT, COVERAGEYEAR, SBMFILESTATUSTYPECD FROM SBMFILEPROCESSINGSUMMARY WHERE SBMFILEPROCESSINGSUMMARYID = ?
SELECT_FILE_PROC_SUM_LATEST_STATECD = SELECT SBMFILEPROCESSINGSUMMARYID, TOTALISSUERFILECNT, TOTALRECORDPROCESSEDCNT, TOTALRECORDREJECTEDCNT, ERRORTHRESHOLDPERCENT, TOTALPREVIOUSPOLICIESNOTSUBMIT, CMSAPPROVEDIND, NOTSUBMITTEDEFFECTUATEDCNT, NOTSUBMITTEDTERMINATEDCNT, NOTSUBMITTEDCANCELLEDCNT, ISSUERFILESETID, ISSUERID, TENANTID, CMSAPPROVALREQUIREDIND, TOTALPOLICYAPPROVEDCNT, MATCHINGPLCNOCHGCNT, MATCHINGPLCCHGAPPLCNT, MATCHINGPLCCORRECTEDCHGAPPLCNT, NEWPLCCREATEDASSENTCNT, NEWPLCCREATEDCORRECTIONAPPLCNT, EFFECTUATEDPOLICYCNT, COVERAGEYEAR, SBMFILESTATUSTYPECD FROM SBMFILEPROCESSINGSUMMARY WHERE TENANTID LIKE ? AND SBMFILESTATUSTYPECD != 'BKO' ORDER BY LASTMODIFIEDDATETIME DESC
SELECT_FILE_PROC_SUM_LATEST_ISSUERID = SELECT SBMFILEPROCESSINGSUMMARYID, TOTALISSUERFILECNT, TOTALRECORDPROCESSEDCNT, TOTALRECORDREJECTEDCNT, ERRORTHRESHOLDPERCENT, TOTALPREVIOUSPOLICIESNOTSUBMIT, CMSAPPROVEDIND, NOTSUBMITTEDEFFECTUATEDCNT, NOTSUBMITTEDTERMINATEDCNT, NOTSUBMITTEDCANCELLEDCNT, ISSUERFILESETID, ISSUERID, TENANTID, CMSAPPROVALREQUIREDIND, TOTALPOLICYAPPROVEDCNT, MATCHINGPLCNOCHGCNT, MATCHINGPLCCHGAPPLCNT, MATCHINGPLCCORRECTEDCHGAPPLCNT, NEWPLCCREATEDASSENTCNT, NEWPLCCREATEDCORRECTIONAPPLCNT, EFFECTUATEDPOLICYCNT, COVERAGEYEAR, SBMFILESTATUSTYPECD FROM SBMFILEPROCESSINGSUMMARY WHERE ISSUERID = ? AND SBMFILESTATUSTYPECD != 'BKO' ORDER BY LASTMODIFIEDDATETIME DESC
SELECT_FILE_PROC_SUM_BATCHID = SELECT sfps.SBMFILEPROCESSINGSUMMARYID, sfps.TOTALISSUERFILECNT, sfps.TOTALRECORDPROCESSEDCNT, sfps.TOTALRECORDREJECTEDCNT, sfps.ERRORTHRESHOLDPERCENT, sfps.TOTALPREVIOUSPOLICIESNOTSUBMIT, sfps.CMSAPPROVEDIND, sfps.NOTSUBMITTEDEFFECTUATEDCNT, sfps.NOTSUBMITTEDTERMINATEDCNT, sfps.NOTSUBMITTEDCANCELLEDCNT, sfps.ISSUERFILESETID, sfps.ISSUERID, sfps.TENANTID, sfps.CMSAPPROVALREQUIREDIND, sfps.TOTALPOLICYAPPROVEDCNT, sfps.MATCHINGPLCNOCHGCNT, sfps.MATCHINGPLCCHGAPPLCNT, sfps.MATCHINGPLCCORRECTEDCHGAPPLCNT, sfps.NEWPLCCREATEDASSENTCNT, sfps.NEWPLCCREATEDCORRECTIONAPPLCNT, sfps.EFFECTUATEDPOLICYCNT, sfps.COVERAGEYEAR, sfps.SBMFILESTATUSTYPECD FROM SBMFILEPROCESSINGSUMMARY sfps JOIN STAGINGSBMFILE ssf ON sfps.SBMFILEPROCESSINGSUMMARYID = ssf.SBMFILEPROCESSINGSUMMARYID WHERE ssf.BATCHID = ? 



# Select - FileInfo (all but FILEINFOXML)
SELECT_FILE_INFO = SELECT SBMFILEINFOID, SBMFILENM, SBMFILEID, SBMFILECREATEDATETIME, SBMFILENUM, SBMFILEPROCESSINGSUMMARYID, TRADINGPARTNERID, FUNCTIONCD, REJECTEDIND, CREATEDATETIME FROM SBMFILEINFO WHERE SBMFILEPROCESSINGSUMMARYID = ? ORDER BY CREATEDATETIME ASC
SELECT_FILE_INFO_BY_FILESETID_FILENUM = SELECT sfi.SBMFILEINFOID, sfi.SBMFILENM, sfi.SBMFILEID, sfi.SBMFILECREATEDATETIME, sfi.SBMFILENUM, sfi.SBMFILEPROCESSINGSUMMARYID, sfi.TRADINGPARTNERID, sfi.FUNCTIONCD, sfi.FILEINFOXML, sfi.REJECTEDIND, sfi.CREATEDATETIME FROM SBMFILEPROCESSINGSUMMARY sfps JOIN SBMFILEINFO sfi ON sfps.SBMFILEPROCESSINGSUMMARYID = sfi.SBMFILEPROCESSINGSUMMARYID WHERE sfps.ISSUERFILESETID = ? AND sfi.SBMFILENUM = ? ORDER BY sfi.SBMFILEPROCESSINGSUMMARYID, sfi.CREATEDATETIME ASC
SELECT_FILE_STATUS = SELECT LASTSBMFILESTATUSTYPECD FROM SBMFILEINFO WHERE SBMFILENM = ?
SELECT_FILE_INFO_XML = SELECT sfi.FILEINFOXML.getClobval() AS XML FROM SBMFILEINFO sfi WHERE sfi.SBMFILEINFOID = ?

# Select - StagingSbmGroupLock
SELECT_STAGING_GROUP_LOCK_ZERO = SELECT SBMFILEPROCESSINGSUMMARYID, PROCESSINGGROUPID, BATCHID FROM STAGINGSBMGROUPLOCK WHERE PROCESSINGGROUPID = 0 AND BATCHID = ?

SELECT_STAGING_GROUP_LOCK_SBMR = SELECT ssgl.SBMFILEPROCESSINGSUMMARYID, ssgl.PROCESSINGGROUPID, ssgl.BATCHID FROM STAGINGSBMGROUPLOCK ssgl WHERE ssgl.PROCESSINGGROUPID = 0 AND NOT EXISTS (SELECT ssp.STAGINGSBMPOLICYID FROM STAGINGSBMPOLICY ssp WHERE  ssgl.SBMFILEPROCESSINGSUMMARYID = ssp.SBMFILEPROCESSINGSUMMARYID)

SELECT_STAGING_XPR_SUMMARY_IDS = SELECT DISTINCT ssp.SBMFILEPROCESSINGSUMMARYID, 0 AS PROCESSINGGROUPID FROM STAGINGSBMPOLICY ssp WHERE NOT EXISTS(SELECT 1 FROM  STAGINGSBMGROUPLOCK ssgl WHERE ssgl.SBMFILEPROCESSINGSUMMARYID = ssp.SBMFILEPROCESSINGSUMMARYID AND ssgl.PROCESSINGGROUPID = 0)


# Select (Extract from XML)
SELECT_STAGINGFILE_POLICY_COUNT = SELECT COUNT(*) FROM STAGINGSBMFILE sfi, TABLE(XMLSEQUENCE(EXTRACT(sfi.SBMXML,'/Enrollment/Policy', 'xmlns="http://sbmi.dsh.cms.gov"'))) WHERE sfi.SBMFILEPROCESSINGSUMMARYID = ?

SELECT_STAGINGFILE_POLICIES = SELECT POLICIES.COLUMN_VALUE.getStringVal() AS POLICYID FROM STAGINGSBMFILE sfi, TABLE(XMLSEQUENCE(EXTRACT(sfi.SBMXML,'/Enrollment/Policy/ExchangeAssignedPolicyId/text()', 'xmlns="http://sbmi.dsh.cms.gov"'))) POLICIES WHERE sfi.SBMFILEPROCESSINGSUMMARYID = (SELECT SBMFILEPROCESSINGSUMMARYID FROM STAGINGSBMGROUPLOCK WHERE BATCHID=? AND PROCESSINGGROUPID > 100)

# Select - SbmTransMsg
SELECT_SBMTRANSMSG = SELECT SBMTRANSMSGID, TRANSMSGDATETIME, SUBSCRIBERSTATECD, RECORDCONTROLNUM, PLANID, SBMTRANSMSGPROCSTATUSTYPECD, EXCHANGEASSIGNEDPOLICYID, EXCHANGEASSIGNEDSUBSCRIBERID FROM SBMTRANSMSG WHERE SBMFILEINFOID = ? ORDER BY RECORDCONTROLNUM ASC


#   "Match" by joining with PolicyVersion
SELECT_SBMTRANSMSG_MATCH_COUNT = SELECT COUNT(stm.SBMTRANSMSGID) FROM POLICYVERSION pv JOIN SBMTRANSMSG stm ON pv.SBMTRANSMSGID = stm.SBMTRANSMSGID JOIN SBMFILEINFO sfi ON stm.SBMFILEINFOID = sfi.SBMFILEINFOID WHERE pv.EXCHANGEPOLICYID = stm.EXCHANGEASSIGNEDPOLICYID AND pv.SUBSCRIBERSTATECD = stm.SUBSCRIBERSTATECD AND sfi.SBMFILEPROCESSINGSUMMARYID = ? AND stm.SBMTRANSMSGPROCSTATUSTYPECD = ? AND pv.PRIORPOLICYVERSIONID IS NOT NULL

SELECT_SBMTRANSMSG_MATCH_COUNT_CORRECTED = SELECT COUNT(stm.SBMTRANSMSGID) FROM POLICYVERSION pv JOIN SBMTRANSMSG stm ON pv.SBMTRANSMSGID = stm.SBMTRANSMSGID JOIN SBMFILEINFO sfi ON stm.SBMFILEINFOID = sfi.SBMFILEINFOID WHERE pv.EXCHANGEPOLICYID = stm.EXCHANGEASSIGNEDPOLICYID AND pv.SUBSCRIBERSTATECD = stm.SUBSCRIBERSTATECD AND sfi.SBMFILEPROCESSINGSUMMARYID = ? AND stm.SBMTRANSMSGPROCSTATUSTYPECD = 'ACC' AND (SELECT COUNT(stmv.SBMTRANSMSGID) FROM SBMTRANSMSGVALIDATION stmv WHERE stmv.SBMTRANSMSGID = stm.SBMTRANSMSGID) > 0  AND pv.PRIORPOLICYVERSIONID IS NOT NULL

SELECT_SBMTRANSMSG_NO_MATCH_COUNT = SELECT COUNT(stm.SBMTRANSMSGID) FROM POLICYVERSION pv JOIN SBMTRANSMSG stm ON pv.SBMTRANSMSGID = stm.SBMTRANSMSGID JOIN SBMFILEINFO sfi ON stm.SBMFILEINFOID = sfi.SBMFILEINFOID WHERE pv.PRIORPOLICYVERSIONID IS NULL AND sfi.SBMFILEPROCESSINGSUMMARYID = ? AND stm.SBMTRANSMSGPROCSTATUSTYPECD = ?  

SELECT_SBMTRANSMSG_REJECT_COUNT = SELECT COUNT(stm.SBMTRANSMSGID) FROM SBMTRANSMSG stm JOIN SBMFILEINFO sfi ON stm.SBMFILEINFOID = sfi.SBMFILEINFOID WHERE sfi.SBMFILEPROCESSINGSUMMARYID = ? AND stm.SBMTRANSMSGPROCSTATUSTYPECD = 'RJC'


# Select - SbmTransMsgValidation
SELECT_VALIDATION = SELECT SBMTRANSMSGID, ELEMENTINERRORNM, VALIDATIONSEQUENCENUM, SBMERRORWARNINGTYPECD, EXCHANGEASSIGNEDMEMBERID FROM SBMTRANSMSGVALIDATION WHERE SBMTRANSMSGID = ?
SELECT_XPR_ERROR_ADDL_INFO = SELECT ADDITIONALERRORINFOTEXT FROM SBMTRANSMSGADDITIONALERRORINFO WHERE SBMTRANSMSGID = ? AND VALIDATIONSEQUENCENUM = ? ORDER BY SBMTRANSMSGADDLERRORINFOID ASC

# Select - PolicyVersion (PV)
SELECT_POLICY_MATCH = SELECT POLICYVERSIONID, PLANID, X12INSRNCLINETYPECD FROM POLICYVERSION WHERE SUBSCRIBERSTATECD = ? AND EXCHANGEPOLICYID = ? AND MAINTENANCEENDDATETIME > TO_TIMESTAMP('9999-12-31', 'YYYY-MM-DD')
SELECT_PV = SELECT POLICYVERSIONID, MAINTENANCESTARTDATETIME, MAINTENANCEENDDATETIME, SUBSCRIBERSTATECD, ISSUERPOLICYID, ISSUERHIOSID, ISSUERSUBSCRIBERID, EXCHANGEPOLICYID, EXCHANGEASSIGNEDSUBSCRIBERID, TRANSCONTROLNUM, SOURCEEXCHANGEID, PLANID, X12INSRNCLINETYPECD, POLICYSTARTDATE, POLICYENDDATE, SBMTRANSMSGID FROM POLICYVERSION WHERE SUBSCRIBERSTATECD = ? AND POLICYVERSIONID = ?

SELECT_POLICY_COUNT_BY_STATUS = SELECT COUNT(pv.POLICYVERSIONID) FROM POLICYSTATUS ps JOIN POLICYVERSION pv ON ps.POLICYVERSIONID = pv.POLICYVERSIONID JOIN SBMTRANSMSG stm on pv.SBMTRANSMSGID = stm.SBMTRANSMSGID JOIN SBMFILEINFO sfi ON stm.SBMFILEINFOID = sfi.SBMFILEINFOID WHERE sfi.SBMFILEPROCESSINGSUMMARYID = ? AND stm.SUBSCRIBERSTATECD = ? AND EXISTS (SELECT 1 FROM POLICYSTATUS ps2 WHERE pv.POLICYVERSIONID = ps2.POLICYVERSIONID AND ps2.INSURANACEPOLICYSTATUSTYPECD = ?)

# Get a count of all staging cancelled policies are currently have the latest EPS policy in Effectuated status.
SELECT_POLICY_COUNT_CANCELLED = SELECT COUNT(spv.POLICYVERSIONID) FROM STAGINGPOLICYSTATUS sps JOIN STAGINGPOLICYVERSION spv ON sps.POLICYVERSIONID = spv.POLICYVERSIONID JOIN SBMTRANSMSG stm on spv.SBMTRANSMSGID = stm.SBMTRANSMSGID JOIN SBMFILEINFO sfi ON stm.SBMFILEINFOID = sfi.SBMFILEINFOID WHERE sfi.SBMFILEPROCESSINGSUMMARYID = ? AND stm.SUBSCRIBERSTATECD = ? AND EXISTS (SELECT ps.POLICYVERSIONID FROM POLICYSTATUS ps WHERE spv.PRIORPOLICYVERSIONID = ps.POLICYVERSIONID AND ps.TRANSDATETIME = (SELECT MAX(psMAX.TRANSDATETIME) FROM POLICYSTATUS psMAX WHERE ps.POLICYVERSIONID = psMAX.POLICYVERSIONID) AND ps.INSURANACEPOLICYSTATUSTYPECD = '2') AND sps.TRANSDATETIME = (SELECT MAX(spsMAX.TRANSDATETIME) FROM STAGINGPOLICYSTATUS spsMAX WHERE sps.POLICYVERSIONID = spsMAX.POLICYVERSIONID) AND sps.INSURANACEPOLICYSTATUSTYPECD = '3' 

SELECT_PV_STATUS = SELECT TRANSDATETIME, INSURANACEPOLICYSTATUSTYPECD FROM POLICYSTATUS WHERE POLICYVERSIONID = ? ORDER BY TRANSDATETIME DESC 

SELECT_PREMIUM = SELECT EFFECTIVESTARTDATE, EFFECTIVEENDDATE, TOTALPREMIUMAMOUNT, OTHERPAYMENTAMOUNT1, OTHERPAYMENTAMOUNT2, EXCHANGERATEAREA, EMPLOYERRESPONSIBLEAMOUNT, INDIVIDUALRESPONSIBLEAMOUNT, CSRAMOUNT, APTCAMOUNT, PRORATEDPREMIUMAMOUNT, PRORATEDAPTCAMOUNT, PRORATEDCSRAMOUNT, INSRNCPLANVARIANTCMPTTYPECD FROM POLICYPREMIUM WHERE POLICYVERSIONID = ? ORDER BY EFFECTIVESTARTDATE ASC


# Select - PolicyMemberVersion (PMV)
SELECT_PMV_POLICY_MATCH = SELECT pmv.EXCHANGEMEMBERID FROM POLICYMEMBER pm JOIN POLICYMEMBERVERSION pmv ON pm.POLICYMEMBERVERSIONID = pmv.POLICYMEMBERVERSIONID WHERE pm.SUBSCRIBERSTATECD = ? AND pm.POLICYVERSIONID = ?

SELECT_PMV = SELECT pm.POLICYMEMBERVERSIONID, pmv.SUBSCRIBERIND, pmv.ISSUERASSIGNEDMEMBERID, pmv.EXCHANGEMEMBERID, pmv.MAINTENANCESTARTDATETIME, pmv.MAINTENANCEENDDATETIME, pmv.POLICYMEMBERDEATHDATE, pmv.POLICYMEMBERLASTNM, pmv.POLICYMEMBERFIRSTNM, pmv.POLICYMEMBERMIDDLENM, pmv.POLICYMEMBERSALUTATIONNM, pmv.POLICYMEMBERSUFFIXNM, pmv.POLICYMEMBERSSN, pmv.EXCHANGEPOLICYID, pmv.SUBSCRIBERSTATECD, pmv.X12TOBACCOUSETYPECD, pmv.POLICYMEMBERBIRTHDATE, pmv.X12GENDERTYPECD, pmv.INCORRECTGENDERTYPECD, pmv.SUBSCRIBERIND, pmla.X12LANGUAGETYPECD, pmla.X12LANGUAGEQUALIFIERTYPECD, mpre.X12RACEETHNICITYTYPECD, pma.ZIPPLUS4CD FROM POLICYMEMBER pm JOIN POLICYMEMBERVERSION pmv ON pm.POLICYMEMBERVERSIONID = pmv.POLICYMEMBERVERSIONID LEFT OUTER JOIN POLICYMEMBERLANGUAGEABILITY pmla ON pmv.POLICYMEMBERVERSIONID = pmla.POLICYMEMBERVERSIONID LEFT OUTER JOIN MEMBERPOLICYRACEETHNICITY mpre ON pmv.POLICYMEMBERVERSIONID = mpre.POLICYMEMBERVERSIONID LEFT OUTER JOIN POLICYMEMBERADDRESS pma ON pmv.POLICYMEMBERVERSIONID = pma.POLICYMEMBERVERSIONID WHERE pm.SUBSCRIBERSTATECD = ? AND pm.POLICYVERSIONID = ?


SELECT_PMV_DATE = SELECT pmd.POLICYMEMBERVERSIONID, pmd.POLICYMEMBERSTARTDATE, pmd.POLICYMEMBERENDDATE FROM POLICYMEMBER pm JOIN POLICYMEMBERDATE pmd ON pm.POLICYMEMBERVERSIONID = pmd.POLICYMEMBERVERSIONID WHERE pm.POLICYVERSIONID = ?

SELECT_MISSING_POLICY_DATA = SELECT sfsmp.MISSINGPOLICYVERSIONID, pv.EXCHANGEPOLICYID, pv.PLANID, pv.POLICYENDDATE, ps.INSURANACEPOLICYSTATUSTYPECD FROM POLICYSTATUS ps JOIN POLICYVERSION pv ON ps.POLICYVERSIONID = pv.POLICYVERSIONID JOIN SBMFILESUMMARYMISSINGPOLICY sfsmp ON pv.POLICYVERSIONID = sfsmp.MISSINGPOLICYVERSIONID WHERE ps.TRANSDATETIME =  (SELECT MAX(ps2.TRANSDATETIME) FROM POLICYSTATUS ps2 WHERE ps.POLICYVERSIONID = ps2.POLICYVERSIONID) AND SBMFILEPROCESSINGSUMMARYID = ?


# Select - lookup data
SELECT_STATES = SELECT STATECD, MARKETYEAR, PRORATIONTYPECD, ERRORTHRESHOLDPERCENT, CMSAPPROVALREQUIREDIND FROM STATEPRORATIONCONFIGURATION WHERE SBMIND ='Y'

# Inserts
# -------

# Insert - XML
INSERT_FILE_STAGING = INSERT INTO STAGINGSBMFILE (SBMXML, BATCHID, SBMFILEPROCESSINGSUMMARYID, SBMFILEINFOID, CREATEBY, LASTMODIFIEDBY) VALUES (XMLTYPE(?), ?, ?, ?, ?, ?)
INSERT_FILE_ARCHIVE = INSERT INTO SBMFILEARCHIVE (SBMFILEINFOID, SBMFILECREATEDATETIME, SBMFILENM, SBMFILEID, SBMFILENUM, TRADINGPARTNERID, TENANTNUM, COVERAGEYEAR, ISSUERFILESETID, ISSUERID, SUBSCRIBERSTATECD, CREATEBY, LASTMODIFIEDBY, SBMXML) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, (SELECT XMLTYPE(xml.OBJECT_VALUE.getCloBVal()) a FROM STAGINGSBMFILE ssf, TABLE(XMLSEQUENCE(ssf.SBMXML)) xml WHERE ssf.SBMFILEINFOID = ? ))

# Insert, Extract to StagingSbmPolicy
EXTRACT_XPR = INSERT INTO STAGINGSBMPOLICY (STAGINGSBMPOLICYID, PROCESSINGGROUPID, SBMPOLICYXML, SBMFILEPROCESSINGSUMMARYID, SBMFILEINFOID, SUBSCRIBERSTATECD, CREATEBY, LASTMODIFIEDBY) (SELECT STAGINGSBMPOLICYSEQ.NEXTVAL, CEIL( ROWNUM / ? ) + 100, XMLTYPE.CREATEXML(xpr.OBJECT_VALUE.getCloBVal()) a, ssf.SBMFILEPROCESSINGSUMMARYID, ssf.SBMFILEINFOID, ?, ?, ? FROM SBMFILEPROCESSINGSUMMARY sfps, STAGINGSBMFILE ssf, STAGINGSBMGROUPLOCK grpLock, TABLE(XMLSEQUENCE(EXTRACT(ssf.SBMXML,'/Enrollment/Policy', 'xmlns="http://sbmi.dsh.cms.gov"'))) xpr WHERE sfps.SBMFILEPROCESSINGSUMMARYID = ssf.SBMFILEPROCESSINGSUMMARYID AND sfps.SBMFILEPROCESSINGSUMMARYID = grpLock.SBMFILEPROCESSINGSUMMARYID AND sfps.SBMFILESTATUSTYPECD = 'IPC' AND grpLock.PROCESSINGGROUPID = 1 AND grpLock.BATCHID = ?)

#ssp.SBMFILEINFOID
INSERT_SBMTRANSMSG = INSERT INTO SBMTRANSMSG (SBMTRANSMSGID, TRANSMSGDATETIME, TRANSMSGDIRECTIONTYPECD, TRANSMSGTYPECD, SBMFILEINFOID, SUBSCRIBERSTATECD, RECORDCONTROLNUM, PLANID, SBMTRANSMSGPROCSTATUSTYPECD, EXCHANGEASSIGNEDPOLICYID, EXCHANGEASSIGNEDSUBSCRIBERID, CREATEBY, LASTMODIFIEDBY, MSG) VALUES (SBMTRANSMSGSEQ.NEXTVAL, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, (SELECT XMLTYPE(xml.OBJECT_VALUE.getCloBVal()) a FROM STAGINGSBMPOLICY ssp, TABLE(XMLSEQUENCE(ssp.SBMPOLICYXML)) xml WHERE ssp.SBMFILEINFOID = ? AND STAGINGSBMPOLICYID = ?))

# Insert - FileInfo
INSERT_FILE_INFO = INSERT INTO SBMFILEINFO (SBMFILEINFOID, SBMFILEPROCESSINGSUMMARYID, SBMFILENM, SBMFILECREATEDATETIME, SBMFILEID, SBMFILENUM, TRADINGPARTNERID, FUNCTIONCD, REJECTEDIND, FILEINFOXML, CREATEBY, LASTMODIFIEDBY, SBMFILELASTMODIFIEDDATETIME) VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, XMLTYPE(?), ?, ?, ?) 
INSERT_FILE_PROC_SUM = INSERT INTO SBMFILEPROCESSINGSUMMARY (SBMFILEPROCESSINGSUMMARYID, TENANTID, ISSUERFILESETID, ISSUERID, TOTALISSUERFILECNT, CMSAPPROVALREQUIREDIND, CMSAPPROVEDIND, TOTALPREVIOUSPOLICIESNOTSUBMIT, NOTSUBMITTEDEFFECTUATEDCNT, NOTSUBMITTEDTERMINATEDCNT, NOTSUBMITTEDCANCELLEDCNT, TOTALRECORDPROCESSEDCNT, TOTALRECORDREJECTEDCNT, TOTALPOLICYAPPROVEDCNT, MATCHINGPLCNOCHGCNT, MATCHINGPLCCHGAPPLCNT, MATCHINGPLCCORRECTEDCHGAPPLCNT, NEWPLCCREATEDASSENTCNT, NEWPLCCREATEDCORRECTIONAPPLCNT, EFFECTUATEDPOLICYCNT, ERRORTHRESHOLDPERCENT, COVERAGEYEAR, SBMFILESTATUSTYPECD, CREATEBY, LASTMODIFIEDBY) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)

# Insert  - File Errors
INSERT_FILE_ERROR = INSERT INTO SBMFILEERROR (SBMFILEINFOID, SBMERRORWARNINGTYPECD, ELEMENTINERRORNM, SBMFILEERRORSEQUENCENUM, CREATEBY, LASTMODIFIEDBY) VALUES (?, ?, ?, ?, ?, ?)
INSERT_FILE_ERROR_ADDL_INFO = INSERT INTO SBMFILEERRORADDITIONALINFO (SBMFILEINFOID, ADDITIONALERRORINFOTEXT, SBMFILEERRORSEQUENCENUM, CREATEBY, LASTMODIFIEDBY) VALUES (?, ?, ?, ?, ?)

# Insert - XPR Errors
INSERT_XPR_ERROR = INSERT INTO SBMTRANSMSGVALIDATION (SBMTRANSMSGID, SBMERRORWARNINGTYPECD, ELEMENTINERRORNM, VALIDATIONSEQUENCENUM, EXCHANGEASSIGNEDMEMBERID, CREATEBY, LASTMODIFIEDBY) VALUES  (?, ?, ?, ?, ?, ?, ?)
INSERT_XPR_ERROR_ADDL_INFO = INSERT INTO SBMTRANSMSGADDITIONALERRORINFO (SBMTRANSMSGADDLERRORINFOID, SBMTRANSMSGID, ADDITIONALERRORINFOTEXT, VALIDATIONSEQUENCENUM, CREATEBY, LASTMODIFIEDBY) VALUES  (SBMTRANSMSGADDTLERRORINFOSEQ.NEXTVAL, ?, ?, ?, ?, ?)

# Insert StagingSbmGroupLock
INSERT_STAGING_GROUP_LOCK = INSERT INTO STAGINGSBMGROUPLOCK (SBMFILEPROCESSINGSUMMARYID, PROCESSINGGROUPID, CREATEBY, LASTMODIFIEDBY) VALUES (?, ?, ?, ?)

# Insert - PolicyVersion (PV) TODO remove MAINTENANCEENDDATETIME and use Oracle column DEFAULT, since only new policies go into staging.
INSERT_STAGING_PV = INSERT INTO STAGINGPOLICYVERSION (POLICYVERSIONID, SUBSCRIBERSTATECD, EXCHANGEPOLICYID, MAINTENANCESTARTDATETIME, MAINTENANCEENDDATETIME, ISSUERPOLICYID, ISSUERHIOSID, ISSUERSUBSCRIBERID, EXCHANGEASSIGNEDSUBSCRIBERID, TRANSCONTROLNUM, SOURCEEXCHANGEID, PLANID, X12INSRNCLINETYPECD, SBMTRANSMSGID, POLICYSTARTDATE, POLICYENDDATE, PRIORPOLICYVERSIONID, CREATEBY, LASTMODIFIEDBY)  VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
INSERT_STAGING_PV_STATUS = INSERT INTO STAGINGPOLICYSTATUS (POLICYVERSIONID, TRANSDATETIME, INSURANACEPOLICYSTATUSTYPECD, CREATEBY, LASTMODIFIEDBY) VALUES (?, ?, ?, ?, ?)
INSERT_STAGING_PREMIUM = INSERT INTO STAGINGPOLICYPREMIUM (POLICYVERSIONID, EFFECTIVESTARTDATE, EFFECTIVEENDDATE, TOTALPREMIUMAMOUNT, OTHERPAYMENTAMOUNT1, OTHERPAYMENTAMOUNT2, EXCHANGERATEAREA, INDIVIDUALRESPONSIBLEAMOUNT, CSRAMOUNT, APTCAMOUNT, PRORATEDPREMIUMAMOUNT, PRORATEDAPTCAMOUNT, PRORATEDCSRAMOUNT, INSRNCPLANVARIANTCMPTTYPECD, CREATEBY, LASTMODIFIEDBY) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)

# Insert - PolicyMember join
INSERT_PM = INSERT INTO STAGINGPOLICYMEMBER (POLICYVERSIONID, POLICYMEMBERVERSIONID, SUBSCRIBERSTATECD, CREATEBY, LASTMODIFIEDBY) VALUES (?, ?, ?, ?, ?)

# Insert - PolicyMemberVersion (PMV)
INSERT_PMV = INSERT INTO STAGINGPOLICYMEMBERVERSION (POLICYMEMBERVERSIONID, SUBSCRIBERIND, ISSUERASSIGNEDMEMBERID, EXCHANGEMEMBERID, MAINTENANCESTARTDATETIME, POLICYMEMBERDEATHDATE, POLICYMEMBERLASTNM, POLICYMEMBERFIRSTNM, POLICYMEMBERMIDDLENM, POLICYMEMBERSALUTATIONNM, POLICYMEMBERSUFFIXNM, POLICYMEMBERSSN, EXCHANGEPOLICYID, SUBSCRIBERSTATECD, X12TOBACCOUSETYPECD, POLICYMEMBERBIRTHDATE, X12GENDERTYPECD, INCORRECTGENDERTYPECD, NONCOVEREDSUBSCRIBERIND, X12LANGUAGETYPECD, X12LANGUAGEQUALIFIERTYPECD, X12RACEETHNICITYTYPECD, ZIPPLUS4CD, PRIORPOLICYMEMBERVERSIONID, CREATEBY, LASTMODIFIEDBY) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)

INSERT_PMV_DATE = INSERT INTO STAGINGPOLICYMEMBERDATE (POLICYMEMBERVERSIONID, POLICYMEMBERSTARTDATE, POLICYMEMBERENDDATE, CREATEBY, LASTMODIFIEDBY) VALUES (?, ?, ?, ?, ?)

# Insert Missing Policy, TODO exclude policies with status of 5 or 6, and policyEnd >= CoverageYear
# FR-FM-PP-SBMI-325, FR-FM-PP-SBMI-523

FIND_INSERT_MISSING_POLICY_BY_ISSUER = INSERT INTO SBMFILESUMMARYMISSINGPOLICY sfsmp (SBMFILEPROCESSINGSUMMARYID, MISSINGPOLICYVERSIONID, CREATEBY, LASTMODIFIEDBY) (SELECT ?, pv.POLICYVERSIONID, ?, ? FROM POLICYVERSION pv JOIN SBMTransMsg sbmt ON sbmt.sbmTransMsgId = pv.sbmTransMsgId JOIN SBMFileInfo sbmfi ON sbmfi.sbmFileInfoId = sbmt.sbmFileInfoId JOIN SBMFileProcessingSummary sfs ON sfs.SBMFileProcessingSummaryID = sbmfi.SBMFileProcessingSummaryID AND sfs.SBMFILESTATUSTYPECD != 'BKO' WHERE NOT EXISTS (SELECT sfi.SBMFILEPROCESSINGSUMMARYID FROM STAGINGSBMFILE sfi, TABLE(XMLSEQUENCE(EXTRACT(sfi.SBMXML,'/Enrollment/Policy/ExchangeAssignedPolicyId/text()', 'xmlns="http://sbmi.dsh.cms.gov"'))) xml WHERE sfi.SBMFILEPROCESSINGSUMMARYID = ? AND pv.EXCHANGEPOLICYID = EXTRACTVALUE(VALUE(xml),'//ExchangeAssignedPolicyId/text()', 'xmlns="http://sbmi.dsh.cms.gov"') AND pv.MAINTENANCEENDDATETIME > TO_TIMESTAMP('9999-12-31', 'YYYY-MM-DD')) AND pv.SUBSCRIBERSTATECD = ? AND pv.ISSUERHIOSID = ? )

FIND_INSERT_MISSING_POLICY_BY_STATE = INSERT INTO SBMFILESUMMARYMISSINGPOLICY sfsmp (SBMFILEPROCESSINGSUMMARYID, MISSINGPOLICYVERSIONID, CREATEBY, LASTMODIFIEDBY) (SELECT ?, pv.POLICYVERSIONID, ?, ? FROM POLICYVERSION pv JOIN SBMTransMsg sbmt ON sbmt.sbmTransMsgId = pv.sbmTransMsgId JOIN SBMFileInfo sbmfi ON sbmfi.sbmFileInfoId = sbmt.sbmFileInfoId JOIN SBMFileProcessingSummary sfs ON sfs.SBMFileProcessingSummaryID = sbmfi.SBMFileProcessingSummaryID AND sfs.SBMFILESTATUSTYPECD != 'BKO'  WHERE NOT EXISTS (SELECT sfi.SBMFILEPROCESSINGSUMMARYID FROM STAGINGSBMFILE sfi, TABLE(XMLSEQUENCE(EXTRACT(sfi.SBMXML,'/Enrollment/Policy/ExchangeAssignedPolicyId/text()', 'xmlns="http://sbmi.dsh.cms.gov"'))) xml WHERE sfi.SBMFILEPROCESSINGSUMMARYID = ? AND pv.EXCHANGEPOLICYID = EXTRACTVALUE(VALUE(xml),'//ExchangeAssignedPolicyId/text()', 'xmlns="http://sbmi.dsh.cms.gov"') AND pv.MAINTENANCEENDDATETIME > TO_TIMESTAMP('9999-12-31', 'YYYY-MM-DD')) AND pv.SUBSCRIBERSTATECD = ? )

FIND_INSERT_MISSING_MEMBER_BY_ISSUER = INSERT INTO SBMFILESUMMARYMISSINGPOLICY sfsmp (SBMFILEPROCESSINGSUMMARYID, MISSINGPOLICYMEMBERVERSIONID, CREATEBY, LASTMODIFIEDBY) (SELECT ?, pmv.POLICYMEMBERVERSIONID, ?, ? FROM POLICYMEMBERVERSION pmv JOIN POLICYMEMBER pm ON pmv.POLICYMEMBERVERSIONID = pm.POLICYMEMBERVERSIONID JOIN POLICYVERSION pv ON pm.POLICYVERSIONID = pv.POLICYVERSIONID JOIN SBMTransMsg sbmt ON sbmt.sbmTransMsgId = pv.sbmTransMsgId JOIN SBMFileInfo sbmfi ON sbmfi.sbmFileInfoId = sbmt.sbmFileInfoId JOIN SBMFileProcessingSummary sfs ON sfs.SBMFileProcessingSummaryID = sbmfi.SBMFileProcessingSummaryID AND sfs.SBMFILESTATUSTYPECD != 'BKO' WHERE NOT EXISTS (SELECT sfi.SBMFILEPROCESSINGSUMMARYID FROM STAGINGSBMFILE sfi, TABLE(XMLSEQUENCE(EXTRACT(sfi.SBMXML,'/Enrollment/Policy/MemberInformation/ExchangeAssignedMemberId/text()', 'xmlns="http://sbmi.dsh.cms.gov"'))) xml WHERE sfi.SBMFILEPROCESSINGSUMMARYID = ? AND pmv.EXCHANGEMEMBERID = EXTRACTVALUE(VALUE(xml),'//ExchangeAssignedMemberId/text()', 'xmlns="http://sbmi.dsh.cms.gov"') AND pmv.MAINTENANCEENDDATETIME > TO_TIMESTAMP('9999-12-31', 'YYYY-MM-DD')) AND pmv.SUBSCRIBERSTATECD = ? AND pv.ISSUERHIOSID = ?)

FIND_INSERT_MISSING_MEMBER_BY_STATE = INSERT INTO SBMFILESUMMARYMISSINGPOLICY sfsmp (SBMFILEPROCESSINGSUMMARYID, MISSINGPOLICYMEMBERVERSIONID, CREATEBY, LASTMODIFIEDBY) (SELECT ?, pmv.POLICYMEMBERVERSIONID, ?, ? FROM POLICYMEMBERVERSION pmv JOIN POLICYMEMBER pm ON pmv.POLICYMEMBERVERSIONID = pm.POLICYMEMBERVERSIONID JOIN POLICYVERSION pv ON pm.POLICYVERSIONID = pv.POLICYVERSIONID JOIN SBMTransMsg sbmt ON sbmt.sbmTransMsgId = pv.sbmTransMsgId JOIN SBMFileInfo sbmfi ON sbmfi.sbmFileInfoId = sbmt.sbmFileInfoId JOIN SBMFileProcessingSummary sfs ON sfs.SBMFileProcessingSummaryID = sbmfi.SBMFileProcessingSummaryID AND sfs.SBMFILESTATUSTYPECD != 'BKO' WHERE NOT EXISTS (SELECT sfi.SBMFILEPROCESSINGSUMMARYID FROM STAGINGSBMFILE sfi, TABLE(XMLSEQUENCE(EXTRACT(sfi.SBMXML,'/Enrollment/Policy/MemberInformation/ExchangeAssignedMemberId/text()', 'xmlns="http://sbmi.dsh.cms.gov"'))) xml WHERE sfi.SBMFILEPROCESSINGSUMMARYID = ? AND pmv.EXCHANGEMEMBERID = EXTRACTVALUE(VALUE(xml),'//ExchangeAssignedMemberId/text()', 'xmlns="http://sbmi.dsh.cms.gov"') AND pmv.MAINTENANCEENDDATETIME > TO_TIMESTAMP('9999-12-31', 'YYYY-MM-DD')) AND pmv.SUBSCRIBERSTATECD = ? )

INSERT_RESPONSE = INSERT INTO SBMRESPONSE (SBMRESPONSEID, SBMFILEPROCESSINGSUMMARYID, SBMFILEINFOID, PHYSICALDOCUMENTID, SBMRESPONSEPHASETYPECD, CREATEBY, LASTMODIFIEDBY) VALUES (SBMRESPONSESEQ.NEXTVAL, ?, ?, ?, ?, ?, ?)

# Update - PolicyVersion (PV)
UPDATE_PV_MED = UPDATE POLICYVERSION SET MAINTENANCEENDDATETIME = ?, LASTMODIFIEDBY = ?, LASTMODIFIEDDATETIME = SYSDATE  WHERE POLICYVERSIONID = ?

# Update - SbmFileProcessingSummary
UPDATE_FILE_PROC_SUM_STATUS = UPDATE SBMFILEPROCESSINGSUMMARY SET SBMFILESTATUSTYPECD = ? WHERE SBMFILEPROCESSINGSUMMARYID = ?
UPDATE_FILE_PROC_SUM = UPDATE SBMFILEPROCESSINGSUMMARY SET TOTALISSUERFILECNT = ?, TOTALPREVIOUSPOLICIESNOTSUBMIT = ?, NOTSUBMITTEDEFFECTUATEDCNT = ?, NOTSUBMITTEDTERMINATEDCNT = ?, NOTSUBMITTEDCANCELLEDCNT = ?, TOTALRECORDPROCESSEDCNT = ?, TOTALRECORDREJECTEDCNT = ?,  TOTALPOLICYAPPROVEDCNT = ?, MATCHINGPLCNOCHGCNT = ?, MATCHINGPLCCHGAPPLCNT = ?, MATCHINGPLCCORRECTEDCHGAPPLCNT = ?, NEWPLCCREATEDASSENTCNT = ?, NEWPLCCREATEDCORRECTIONAPPLCNT = ?, EFFECTUATEDPOLICYCNT = ?, LASTMODIFIEDBY = ?, LASTMODIFIEDDATETIME = SYSTIMESTAMP WHERE SBMFILEPROCESSINGSUMMARYID = ?
UPDATE_FILE_PROC_SUM_CMS_APPROVED = UPDATE SBMFILEPROCESSINGSUMMARY SET CMSAPPROVEDIND = ? WHERE SBMFILEPROCESSINGSUMMARYID = ?

#
UPDATE_STAGING_GROUP_LOCK = UPDATE STAGINGSBMGROUPLOCK SET BATCHID = ? WHERE BATCHID IS NULL AND PROCESSINGGROUPID = 0 AND SBMFILEPROCESSINGSUMMARYID = ?

UPDATE_STAGING_GROUP_LOCK_EXTRACT = UPDATE STAGINGSBMGROUPLOCK SET BATCHID = ? WHERE BATCHID IS NULL AND PROCESSINGGROUPID = 1 AND ROWNUM = 1

VERIFY_JOB_RUNNING = SELECT JOBID FROM BATCHPROCESSLOG WHERE JOBNM = ? AND JOBSTATUSCD = 'STARTED'
VERIFY_CMS_APPROVAL_REQ = SELECT CMSAPPROVALREQUIREDIND FROM SBMFILEPROCESSINGSUMMARY WHERE SBMFILEPROCESSINGSUMMARYID = ?

# Verify - SbmFileError
VERIFY_FILE_ERROR = SELECT COUNT(sfe.SBMFILEINFOID) FROM SBMFILEERROR sfe INNER JOIN SBMFILEINFO sfi ON sfe.SBMFILEINFOID = sfi.SBMFILEINFOID WHERE sfi.SBMFILEPROCESSINGSUMMARYID = ?

# Verify - SbmTransMsgValidation
VERIFY_XPR_ERROR = SELECT COUNT(stmv.SBMTRANSMSGID) FROM SBMTRANSMSGVALIDATION stmv INNER JOIN SBMTRANSMSG stm ON stmv.SBMTRANSMSGID = stm.SBMTRANSMSGID INNER JOIN SBMFILEINFO sfi ON stm.SBMFILEINFOID = sfi.SBMFILEINFOID WHERE sfi.SBMFILEPROCESSINGSUMMARYID = ? AND SBMERRORWARNINGTYPECD LIKE 'ER-%'
VERIFY_XPR_WARNING = SELECT COUNT(stmv.SBMTRANSMSGID) FROM SBMTRANSMSGVALIDATION stmv INNER JOIN SBMTRANSMSG stm ON stmv.SBMTRANSMSGID = stm.SBMTRANSMSGID INNER JOIN SBMFILEINFO sfi ON stm.SBMFILEINFOID = sfi.SBMFILEINFOID WHERE sfi.SBMFILEPROCESSINGSUMMARYID = ? AND SBMERRORWARNINGTYPECD LIKE 'WR-%'


# Verify - StagingSbmPolicy (XPR)
VERIFY_XPR = SELECT COUNT(STAGINGSBMPOLICYID) FROM STAGINGSBMPOLICY WHERE SBMFILEPROCESSINGSUMMARYID = ?


#Batch SQLS
LOCK_STAGING_XPR_GROUP=INSERT INTO STAGINGSBMGROUPLOCK (BATCHID, SBMFILEPROCESSINGSUMMARYID, PROCESSINGGROUPID) \
								SELECT :jobId, SBMFILEPROCESSINGSUMMARYID, PROCESSINGGROUPID FROM (  \
										SELECT DISTINCT SBMFILEPROCESSINGSUMMARYID, PROCESSINGGROUPID FROM STAGINGSBMPOLICY A  \
										 WHERE PROCESSINGGROUPID > 100 \
										   AND NOT EXISTS \
											(SELECT 1 FROM STAGINGSBMGROUPLOCK B WHERE B.SBMFILEPROCESSINGSUMMARYID = A.SBMFILEPROCESSINGSUMMARYID AND B.PROCESSINGGROUPID = A.PROCESSINGGROUPID)) \
								WHERE ROWNUM = 1
# Delete StagingSbm, if WHERE condition is incorrect, job will loop continuously.
DELETE_STAGING_XPR_GROUP= DELETE FROM STAGINGSBMPOLICY WHERE (SBMFILEPROCESSINGSUMMARYID, PROCESSINGGROUPID) IN (SELECT SBMFILEPROCESSINGSUMMARYID, PROCESSINGGROUPID FROM STAGINGSBMGROUPLOCK WHERE BATCHID=:jobId)

DELETE_STAGING_XPR_GROUP_LOCK=DELETE FROM STAGINGSBMGROUPLOCK WHERE BATCHID=:jobId

DELETE_STAGING_GROUP_LOCK = DELETE FROM STAGINGSBMGROUPLOCK WHERE SBMFILEPROCESSINGSUMMARYID = ? AND BATCHID = ?

DELETE_STAGING_GROUP_LOCK_EXTRACT = DELETE FROM STAGINGSBMGROUPLOCK WHERE PROCESSINGGROUPID = 1 AND BATCHID = ?

SELECT_XPRS_FROM_STAGING_SBM_POLICY=SELECT A.SBMPOLICYXML.getClobval() AS XPRXML, A.PROCESSINGGROUPID, A.SBMFILEPROCESSINGSUMMARYID, A.STAGINGSBMPOLICYID, A.SBMFILEINFOID, C.FILEINFOXML, C.CREATEDATETIME \
									FROM STAGINGSBMPOLICY A, STAGINGSBMGROUPLOCK B, SBMFILEINFO C WHERE (A.SBMFILEPROCESSINGSUMMARYID, A.PROCESSINGGROUPID) IN \
									  (SELECT B.SBMFILEPROCESSINGSUMMARYID, B.PROCESSINGGROUPID FROM STAGINGSBMGROUPLOCK WHERE BATCHID = ?) AND A.SBMFILEINFOID = C.SBMFILEINFOID

DELETE_FILE_STAGING = DELETE FROM STAGINGSBMFILE WHERE SBMFILEPROCESSINGSUMMARYID = ?

SELECT_STAGING_XPR_COUNT=SELECT COUNT(*) FROM STAGINGSBMPOLICY A WHERE NOT EXISTS \
											(SELECT 1 FROM STAGINGSBMGROUPLOCK B WHERE B.SBMFILEPROCESSINGSUMMARYID = A.SBMFILEPROCESSINGSUMMARYID AND B.PROCESSINGGROUPID = A.PROCESSINGGROUPID)
 
SELECT_PENDING_EXTRACT_COUNT=SELECT COUNT(*) FROM STAGINGSBMGROUPLOCK WHERE BATCHID IS NULL AND PROCESSINGGROUPID = 1 
 
DELETE_STAGING_PV = DELETE FROM STAGINGPOLICYVERSION spm WHERE spm.SBMTRANSMSGID IN ( SELECT stm.SBMTRANSMSGID FROM SBMTRANSMSG stm WHERE stm.SBMTRANSMSGID in ( SELECT stm.SBMTRANSMSGID FROM SBMTRANSMSG stm INNER JOIN SBMFILEINFO sfi ON stm.SBMFILEINFOID = sfi.SBMFILEINFOID WHERE sfi.SBMFILEPROCESSINGSUMMARYID = ? ) ) 

DELETE_STAGING_PREMIUM = DELETE FROM STAGINGPOLICYPREMIUM spp WHERE spp.POLICYVERSIONID IN ( SELECT spv.POLICYVERSIONID FROM STAGINGPOLICYVERSION spv WHERE spv.POLICYVERSIONID in ( SELECT spv.POLICYVERSIONID FROM STAGINGPOLICYVERSION spv INNER JOIN SBMTRANSMSG stm ON spv.SBMTRANSMSGID = stm.SBMTRANSMSGID INNER JOIN SBMFILEINFO sfi ON stm.SBMFILEINFOID = sfi.SBMFILEINFOID WHERE sfi.SBMFILEPROCESSINGSUMMARYID = ? ) )

DELETE_STAGING_STATUS =  DELETE FROM STAGINGPOLICYSTATUS sps WHERE sps.POLICYVERSIONID IN ( SELECT spv.POLICYVERSIONID FROM STAGINGPOLICYVERSION spv WHERE spv.POLICYVERSIONID in ( SELECT spv.POLICYVERSIONID FROM STAGINGPOLICYVERSION spv INNER JOIN SBMTRANSMSG stm ON spv.SBMTRANSMSGID = stm.SBMTRANSMSGID INNER JOIN SBMFILEINFO sfi ON stm.SBMFILEINFOID = sfi.SBMFILEINFOID WHERE sfi.SBMFILEPROCESSINGSUMMARYID = ? ) ) 

DELETE_STAGING_PM = DELETE FROM STAGINGPOLICYMEMBER spm WHERE spm.POLICYVERSIONID IN ( SELECT spv.POLICYVERSIONID FROM STAGINGPOLICYVERSION spv WHERE spv.POLICYVERSIONID in ( SELECT spv.POLICYVERSIONID FROM STAGINGPOLICYVERSION spv INNER JOIN SBMTRANSMSG stm ON spv.SBMTRANSMSGID = stm.SBMTRANSMSGID INNER JOIN SBMFILEINFO sfi ON stm.SBMFILEINFOID = sfi.SBMFILEINFOID WHERE sfi.SBMFILEPROCESSINGSUMMARYID = ? ) ) 

DELETE_STAGING_PMV = DELETE FROM STAGINGPOLICYMEMBERVERSION spmv WHERE spmv.POLICYMEMBERVERSIONID IN ( SELECT spm.POLICYMEMBERVERSIONID FROM STAGINGPOLICYMEMBER spm WHERE spm.POLICYMEMBERVERSIONID in ( SELECT spm.POLICYMEMBERVERSIONID FROM STAGINGPOLICYMEMBER spm INNER JOIN STAGINGPOLICYVERSION spv ON spm.POLICYVERSIONID = spv.POLICYVERSIONID INNER JOIN SBMTRANSMSG stm ON spv.SBMTRANSMSGID = stm.SBMTRANSMSGID INNER JOIN SBMFILEINFO sfi ON stm.SBMFILEINFOID = sfi.SBMFILEINFOID WHERE sfi.SBMFILEPROCESSINGSUMMARYID = ? ) ) 

DELETE_STAGING_DATE = DELETE FROM STAGINGPOLICYMEMBERDATE spmd WHERE spmd.POLICYMEMBERVERSIONID IN ( SELECT spmv.POLICYMEMBERVERSIONID FROM STAGINGPOLICYMEMBERVERSION spmv WHERE spmv.POLICYMEMBERVERSIONID in ( SELECT spmv2.POLICYMEMBERVERSIONID FROM STAGINGPOLICYMEMBERVERSION spmv2 INNER JOIN STAGINGPOLICYMEMBER spm ON spmv2.POLICYMEMBERVERSIONID = spm.POLICYMEMBERVERSIONID INNER JOIN STAGINGPOLICYVERSION spv ON spm.POLICYVERSIONID = spv.POLICYVERSIONID INNER JOIN SBMTRANSMSG stm ON spv.SBMTRANSMSGID = stm.SBMTRANSMSGID INNER JOIN SBMFILEINFO sfi ON stm.SBMFILEINFOID = sfi.SBMFILEINFOID  WHERE sfi.SBMFILEPROCESSINGSUMMARYID = ? ) ) 

 
                      
#INSRNCPLAN table
VERIFY_QHPID_EXISTS_FOR_PLAN_YEAR = SELECT COUNT(HIOSSTANDARDCMPTID) FROM INSRNCPLAN WHERE HIOSSTANDARDCMPTID =? AND MARKETYEAR =? AND INSRNCMARKETCOVERAGETYPECD='1' 

RETRIEVE_METAL_LEVEL = SELECT INSRNCPLANBNFTMETLTIERTYPECD FROM INSRNCPLAN WHERE HIOSSTANDARDCMPTID= ? AND MARKETYEAR = ?  AND INSRNCMARKETCOVERAGETYPECD='1' 

RETRIEVE_CSR_MULTIPLIER_BY_VARIANTID_AND_METAL=SELECT CSRPLANMULTIPLIERNUM FROM COSTSHARINGREDUCTIONMULTIPLIER WHERE INSRNCPLANVARIANTCMPTTYPECD = ? AND INSRNCPLANBNFTMETLTIERTYPECD = ? AND MARKETYEAR = ?

RETRIEVE_CSR_MULTIPLIER_BY_VARIANTID=SELECT CSRPLANMULTIPLIERNUM FROM COSTSHARINGREDUCTIONMULTIPLIER WHERE INSRNCPLANVARIANTCMPTTYPECD = ? AND MARKETYEAR = ?

RETRIEVE_RACE_ETHNICITY_CODES=SELECT X12RACEETHNICITYTYPECD FROM X12RACEETHNICITYTYPE WHERE INDUSTRYSTANDARDTYPENM='X12'

RETRIEVE_LANGUAGE_CODES=SELECT X12LANGUAGETYPECD FROM X12LANGUAGETYPE WHERE X12LANGUAGEQUALIFIERTYPECD IN('LD', 'LE')

#Business Rule Config table
RETRIEVE_SBM_BUSINESS_RULES = SELECT STATECD, SBMBUSINESSRULETYPECD FROM SBMBUSINESSRULECONFIGURATION ORDER BY STATECD

RETRIEVE_ERROR_WARNING_TYPES = SELECT SBMERRORWARNINGTYPECD, SBMERRORWARNINGTYPENM FROM SBMERRORWARNINGTYPE

RETRIEVE_SBM_EXECUTION_LOG = SELECT COVERAGEYEAR, TENANTID, SBMFILENM, SBMFILEID, A.CREATEDATETIME, ISSUERID, ISSUERFILESETID, SBMFILENUM, TOTALISSUERFILECNT, SBMFILESTATUSTYPECD, REJECTEDIND, B.LASTMODIFIEDDATETIME \
                             FROM SBMFILEINFO A, SBMFILEPROCESSINGSUMMARY B \
                             WHERE A.SBMFILEPROCESSINGSUMMARYID = B.SBMFILEPROCESSINGSUMMARYID \
                             AND B.LASTMODIFIEDDATETIME > \
								(SELECT MAX (LASTEXECUTION) FROM \
								  (SELECT NVL(MAX(STARTDATETIME), TO_DATE('01/01/1900', 'MM/DD/YYYY')) AS LASTEXECUTION \
								  FROM BATCHPROCESSLOG \
								  WHERE BATCHBUSINESSID LIKE 'SBMEXECUTIONREPORT%' AND JOBSTATUSCD='COMPLETED' \
								  UNION \
								  SELECT NVL(MAX(STARTDATETIME), TO_DATE('01/01/1900', 'MM/DD/YYYY')) AS LASTEXECUTION \
								  FROM BATCHPROCESSLOG \
								  WHERE BATCHBUSINESSID LIKE 'SBMUPDATESTATUS%' AND JOBSTATUSCD='COMPLETED' \
								  ) \
								)

# Approval, merge Staging to EPS

MERGE_PV = MERGE INTO PolicyVersion PV USING (\
SELECT POLICYVERSIONID,StagingPolicyVersion.SUBSCRIBERSTATECD,EXCHANGEPOLICYID,MAINTENANCESTARTDATETIME,MAINTENANCEENDDATETIME, \
       ISSUERPOLICYID,ISSUERHIOSID,ISSUERSUBSCRIBERID,StagingPolicyVersion.EXCHANGEASSIGNEDSUBSCRIBERID,TRANSCONTROLNUM, \
	   SOURCEEXCHANGEID,StagingPolicyVersion.PLANID,X12INSRNCLINETYPECD,StagingPolicyVersion.CREATEDATETIME,StagingPolicyVersion.LASTMODIFIEDDATETIME, \
       StagingPolicyVersion.CREATEBY,StagingPolicyVersion.LASTMODIFIEDBY,POLICYSTARTDATE,POLICYENDDATE,StagingPolicyVersion.SBMTRANSMSGID, priorPOLICYVERSIONID \
FROM StagingPolicyVersion, SBMFileInfo, SBMTransMsg \
WHERE StagingPolicyVersion.sbmTransMsgId = SBMTransMsg.sbmTransMsgId \
AND SBMTransMsg.sbmFileInfoId = SBMFileInfo.sbmFileInfoId AND SBMFileInfo.SBMFileProcessingSummaryID = ? \
UNION \
SELECT priorPOLICYVERSIONID AS POLICYVERSIONID ,StagingPolicyVersion.SUBSCRIBERSTATECD,StagingPolicyVersion.EXCHANGEPOLICYID, MAINTENANCESTARTDATETIME, \
        (systimestamp-INTERVAL '0.001000' SECOND) AS MAINTENANCEENDDATETIME, \
        ISSUERPOLICYID,ISSUERHIOSID,ISSUERSUBSCRIBERID,StagingPolicyVersion.EXCHANGEASSIGNEDSUBSCRIBERID,TRANSCONTROLNUM,\
        SOURCEEXCHANGEID,StagingPolicyVersion.PLANID,X12INSRNCLINETYPECD,StagingPolicyVersion.CREATEDATETIME,StagingPolicyVersion.LASTMODIFIEDDATETIME, \
        StagingPolicyVersion.CREATEBY,StagingPolicyVersion.LASTMODIFIEDBY,POLICYSTARTDATE,POLICYENDDATE,StagingPolicyVersion.SBMTRANSMSGID, priorPOLICYVERSIONID \
FROM   StagingPolicyVersion, SBMFileInfo, SBMTransMsg \
WHERE  StagingPolicyVersion.sbmTransMsgId = SBMTransMsg.sbmTransMsgId \
AND    SBMTransMsg.sbmFileInfoId = SBMFileInfo.sbmFileInfoId AND SBMFileInfo.SBMFileProcessingSummaryID = ? AND priorPOLICYVERSIONID IS NOT NULL \
) SPV \
ON (SPV.policyVersionId = PV.policyVersionId) \
WHEN MATCHED THEN UPDATE SET PV.MAINTENANCEENDDATETIME = SPV.MAINTENANCEENDDATETIME, PV.LASTMODIFIEDBY = ? \
WHEN  NOT MATCHED THEN \
INSERT (POLICYVERSIONID,SUBSCRIBERSTATECD,EXCHANGEPOLICYID,MAINTENANCESTARTDATETIME,MAINTENANCEENDDATETIME, ISSUERPOLICYID,ISSUERHIOSID,ISSUERSUBSCRIBERID,EXCHANGEASSIGNEDSUBSCRIBERID,\
        TRANSCONTROLNUM,SOURCEEXCHANGEID,PLANID,X12INSRNCLINETYPECD,CREATEDATETIME,LASTMODIFIEDDATETIME,CREATEBY,LASTMODIFIEDBY,POLICYSTARTDATE,POLICYENDDATE,SBMTRANSMSGID, PRIORPOLICYVERSIONID) \
VALUES (SPV.POLICYVERSIONID, SPV.SUBSCRIBERSTATECD, SPV.EXCHANGEPOLICYID, systimestamp, SPV.MAINTENANCEENDDATETIME,	SPV.ISSUERPOLICYID, SPV.ISSUERHIOSID, SPV.ISSUERSUBSCRIBERID, SPV.EXCHANGEASSIGNEDSUBSCRIBERID, \
        SPV.TRANSCONTROLNUM, SPV.SOURCEEXCHANGEID, SPV.PLANID, SPV.X12INSRNCLINETYPECD, SPV.CREATEDATETIME, SPV.LASTMODIFIEDDATETIME, ? , ?, SPV.POLICYSTARTDATE, SPV.POLICYENDDATE, SPV.SBMTRANSMSGID, SPV.PRIORPOLICYVERSIONID)
       
        
MERGE_STATUS = INSERT INTO PolicyStatus (POLICYVERSIONID, TRANSDATETIME, INSURANACEPOLICYSTATUSTYPECD, CREATEBY, LASTMODIFIEDBY) \
    SELECT StagingPolicyStatus.POLICYVERSIONID, TRANSDATETIME,	INSURANACEPOLICYSTATUSTYPECD, ?, ? \
    FROM StagingPolicyStatus, StagingPolicyVersion, SBMFileInfo, SBMTransMsg \
    WHERE StagingPolicyStatus.policyVersionId = StagingPolicyVersion.policyVersionId \
    AND StagingPolicyVersion.sbmTransMsgId = SBMTransMsg.sbmTransMsgId AND SBMTransMsg.sbmFileInfoId = SBMFileInfo.sbmFileInfoId AND SBMFileInfo.SBMFileProcessingSummaryID = ?


MERGE_PREMIUM = INSERT INTO PolicyPremium ( POLICYVERSIONID, EFFECTIVESTARTDATE, EFFECTIVEENDDATE, TOTALPREMIUMAMOUNT, OTHERPAYMENTAMOUNT2, EXCHANGERATEAREA, INDIVIDUALRESPONSIBLEAMOUNT, \
	    CSRAMOUNT, OTHERPAYMENTAMOUNT1, APTCAMOUNT, PRORATEDPREMIUMAMOUNT, PRORATEDAPTCAMOUNT, PRORATEDCSRAMOUNT, INSRNCPLANVARIANTCMPTTYPECD, CREATEBY, LASTMODIFIEDBY) \
    SELECT 	StagingPolicyPremium.POLICYVERSIONID, EFFECTIVESTARTDATE, EFFECTIVEENDDATE, TOTALPREMIUMAMOUNT, OTHERPAYMENTAMOUNT2, EXCHANGERATEAREA, INDIVIDUALRESPONSIBLEAMOUNT, \
	    CSRAMOUNT, OTHERPAYMENTAMOUNT1,	APTCAMOUNT, PRORATEDPREMIUMAMOUNT, PRORATEDAPTCAMOUNT, PRORATEDCSRAMOUNT, INSRNCPLANVARIANTCMPTTYPECD, ?, ? \
    FROM StagingPolicyPremium, StagingPolicyVersion, SBMFileInfo, SBMTransMsg \
    WHERE StagingPolicyPremium.policyVersionId = StagingPolicyVersion.policyVersionId AND StagingPolicyVersion.sbmTransMsgId = SBMTransMsg.sbmTransMsgId \
    AND SBMTransMsg.sbmFileInfoId = SBMFileInfo.sbmFileInfoId AND SBMFileInfo.SBMFileProcessingSummaryID = ?
    
    
MERGE_PMV = MERGE INTO PolicyMemberVersion PMV USING( \
SELECT StagingPolicyMemberVersion.POLICYMEMBERVERSIONID, SUBSCRIBERIND, ISSUERASSIGNEDMEMBERID, EXCHANGEMEMBERID, StagingPolicyMemberVersion.MAINTENANCESTARTDATETIME, StagingPolicyMemberVersion.MAINTENANCEENDDATETIME, \
    POLICYMEMBERDEATHDATE, POLICYMEMBERLASTNM, POLICYMEMBERFIRSTNM, POLICYMEMBERMIDDLENM, POLICYMEMBERSALUTATIONNM,	POLICYMEMBERSUFFIXNM, POLICYMEMBERSSN, StagingPolicyMemberVersion.EXCHANGEPOLICYID,  \
	StagingPolicyMemberVersion.SUBSCRIBERSTATECD, X12TOBACCOUSETYPECD, POLICYMEMBERBIRTHDATE, X12GENDERTYPECD, INCORRECTGENDERTYPECD, StagingPolicyMemberVersion.CREATEDATETIME, \
	StagingPolicyMemberVersion.LASTMODIFIEDDATETIME, StagingPolicyMemberVersion.CREATEBY, StagingPolicyMemberVersion.LASTMODIFIEDBY, SBMTransMsg.sbmTransMsgId, priorPOLICYMemberVERSIONID \
FROM StagingPolicyMemberVersion, StagingPolicyVersion, StagingPolicyMember, SBMFileInfo, SBMTransMsg \
WHERE	StagingPolicyMemberVersion.policyMemberVersionId = StagingPolicyMember.policyMemberVersionId \
AND	StagingPolicyMember.policyVersionId = StagingPolicyVersion.policyVersionId AND	StagingPolicyVersion.sbmTransMsgId = SBMTransMsg.sbmTransMsgId \
AND SBMTransMsg.sbmFileInfoId = SBMFileInfo.sbmFileInfoId AND SBMFileInfo.SBMFileProcessingSummaryID = ? \
UNION \
SELECT priorPOLICYMemberVERSIONID AS POLICYMEMBERVERSIONID, SUBSCRIBERIND, ISSUERASSIGNEDMEMBERID, EXCHANGEMEMBERID, StagingPolicyMemberVersion.MAINTENANCESTARTDATETIME, \
	(systimestamp-INTERVAL '0.001000' SECOND) AS MAINTENANCEENDDATETIME, POLICYMEMBERDEATHDATE, POLICYMEMBERLASTNM, POLICYMEMBERFIRSTNM, POLICYMEMBERMIDDLENM, POLICYMEMBERSALUTATIONNM, \
	POLICYMEMBERSUFFIXNM, POLICYMEMBERSSN, StagingPolicyMemberVersion.EXCHANGEPOLICYID, StagingPolicyMemberVersion.SUBSCRIBERSTATECD, X12TOBACCOUSETYPECD, POLICYMEMBERBIRTHDATE, \
	X12GENDERTYPECD, INCORRECTGENDERTYPECD, StagingPolicyMemberVersion.CREATEDATETIME, StagingPolicyMemberVersion.LASTMODIFIEDDATETIME, StagingPolicyMemberVersion.CREATEBY, \
	StagingPolicyMemberVersion.LASTMODIFIEDBY, SBMTransMsg.sbmTransMsgId, priorPOLICYMemberVERSIONID \
FROM StagingPolicyMemberVersion, StagingPolicyVersion, StagingPolicyMember, SBMFileInfo, SBMTransMsg \
WHERE StagingPolicyMemberVersion.policyMemberVersionId = StagingPolicyMember.policyMemberVersionId \
AND	StagingPolicyMember.policyVersionId = StagingPolicyVersion.policyVersionId AND	StagingPolicyVersion.sbmTransMsgId = SBMTransMsg.sbmTransMsgId \
AND SBMTransMsg.sbmFileInfoId = SBMFileInfo.sbmFileInfoId AND SBMFileInfo.SBMFileProcessingSummaryID = ? AND priorPOLICYMemberVERSIONID IS NOT NULL \
) SPMV \
ON (SPMV.policyMemberVersionId = PMV.policyMemberVersionId) \
WHEN MATCHED THEN UPDATE \
SET  PMV.MAINTENANCEENDDATETIME = SPMV.MAINTENANCEENDDATETIME, PMV.LASTMODIFIEDBY = ? \
WHEN NOT MATCHED THEN \
INSERT (POLICYMEMBERVERSIONID, SUBSCRIBERIND, ISSUERASSIGNEDMEMBERID, EXCHANGEMEMBERID, MAINTENANCESTARTDATETIME, MAINTENANCEENDDATETIME, \
	POLICYMEMBERDEATHDATE, POLICYMEMBERLASTNM, POLICYMEMBERFIRSTNM, POLICYMEMBERMIDDLENM, POLICYMEMBERSALUTATIONNM, \
	POLICYMEMBERSUFFIXNM, POLICYMEMBERSSN, EXCHANGEPOLICYID, SUBSCRIBERSTATECD, X12TOBACCOUSETYPECD, POLICYMEMBERBIRTHDATE, \
	X12GENDERTYPECD, INCORRECTGENDERTYPECD, CREATEDATETIME, LASTMODIFIEDDATETIME, CREATEBY, LASTMODIFIEDBY, sbmTransMsgId) \
VALUES (SPMV.POLICYMEMBERVERSIONID, SPMV.SUBSCRIBERIND, SPMV.ISSUERASSIGNEDMEMBERID, SPMV.EXCHANGEMEMBERID, systimestamp, SPMV.MAINTENANCEENDDATETIME, \
	SPMV.POLICYMEMBERDEATHDATE, SPMV.POLICYMEMBERLASTNM, SPMV.POLICYMEMBERFIRSTNM, SPMV.POLICYMEMBERMIDDLENM, SPMV.POLICYMEMBERSALUTATIONNM, \
	SPMV.POLICYMEMBERSUFFIXNM, SPMV.POLICYMEMBERSSN, SPMV.EXCHANGEPOLICYID, SPMV.SUBSCRIBERSTATECD, SPMV.X12TOBACCOUSETYPECD, SPMV.POLICYMEMBERBIRTHDATE, \
	SPMV.X12GENDERTYPECD, SPMV.INCORRECTGENDERTYPECD, SPMV.CREATEDATETIME, SPMV.LASTMODIFIEDDATETIME, ?, ?, SPMV.sbmTransMsgId)


MERGE_LANG = INSERT INTO PolicyMemberLanguageAbility (POLICYMemberVERSIONID, X12LANGUAGETYPECD, X12LANGUAGEQUALIFIERTYPECD, CREATEBY, LASTMODIFIEDBY) \
SELECT StagingPolicyMemberVersion.policyMemberVersionId, X12LANGUAGETYPECD, X12LANGUAGEQUALIFIERTYPECD, ?, ? \
FROM  StagingPolicyMemberVersion, StagingPolicyMember, StagingPolicyVersion, SBMFileInfo, SBMTransMsg \
WHERE	StagingPolicyMemberVersion.policyMemberVersionId = StagingPolicyMember.policyMemberVersionId \
AND	StagingPolicyMember.policyVersionId = StagingPolicyVersion.policyVersionId AND StagingPolicyVersion.sbmTransMsgId = SBMTransMsg.sbmTransMsgId \
AND SBMTransMsg.sbmFileInfoId = SBMFileInfo.sbmFileInfoId AND SBMFileInfo.SBMFileProcessingSummaryID = ? AND X12LANGUAGETYPECD IS NOT NULL


MERGE_RACE = INSERT INTO MEMBERPOLICYRACEETHNICITY (POLICYMemberVERSIONID, X12RACEETHNICITYTYPECD, CREATEBY, LASTMODIFIEDBY) \
SELECT StagingPolicyMemberVersion.policyMemberVersionId, X12RACEETHNICITYTYPECD, ?, ? \
FROM StagingPolicyMemberVersion, StagingPolicyMember, StagingPolicyVersion, SBMFileInfo, SBMTransMsg \
WHERE	StagingPolicyMemberVersion.policyMemberVersionId = StagingPolicyMember.policyMemberVersionId \
AND	StagingPolicyMember.policyVersionId = StagingPolicyVersion.policyVersionId AND StagingPolicyVersion.sbmTransMsgId = SBMTransMsg.sbmTransMsgId \
AND SBMTransMsg.sbmFileInfoId = SBMFileInfo.sbmFileInfoId AND SBMFileInfo.SBMFileProcessingSummaryID = ? AND X12RACEETHNICITYTYPECD IS NOT NULL


MERGE_ADDR = INSERT INTO policyMemberAddress (POLICYMemberVERSIONID, X12AddressTYPECD, zipPlus4Cd, CREATEBY, LASTMODIFIEDBY) \
SELECT StagingPolicyMemberVersion.policyMemberVersionId, '1', StagingPolicyMemberVersion.zipPlus4Cd, ?, ? \
FROM  StagingPolicyMemberVersion, StagingPolicyMember, StagingPolicyVersion, SBMFileInfo, SBMTransMsg \
WHERE	StagingPolicyMemberVersion.policyMemberVersionId = StagingPolicyMember.policyMemberVersionId \
AND	StagingPolicyMember.policyVersionId = StagingPolicyVersion.policyVersionId AND StagingPolicyVersion.sbmTransMsgId = SBMTransMsg.sbmTransMsgId \
AND SBMTransMsg.sbmFileInfoId = SBMFileInfo.sbmFileInfoId AND SBMFileInfo.SBMFileProcessingSummaryID = ? AND zipPlus4Cd IS NOT NULL


MERGE_DATE = INSERT INTO policyMemberDate (POLICYMemberVERSIONID, PolicyMemberStartDate, policyMemberEndDate, CREATEBY, LASTMODIFIEDBY) \
SELECT StagingpolicyMemberDate.policyMemberVersionId, StagingpolicyMemberDate.policyMemberStartDate, StagingpolicyMemberDate.policyMemberEndDate, ?, ? \
FROM StagingPolicyMemberDate, StagingPolicyMemberVersion, StagingPolicyMember, StagingPolicyVersion, SBMFileInfo, SBMTransMsg \
WHERE StagingPolicyMemberDate.policyMemberVersionId = StagingPolicyMemberVersion.policyMemberVersionId \
AND StagingPolicyMemberVersion.policyMemberVersionId = StagingPolicyMember.policyMemberVersionId \
AND	StagingPolicyMember.policyVersionId = StagingPolicyVersion.policyVersionId AND	StagingPolicyVersion.sbmTransMsgId = SBMTransMsg.sbmTransMsgId \
AND SBMTransMsg.sbmFileInfoId = SBMFileInfo.sbmFileInfoId AND SBMFileInfo.SBMFileProcessingSummaryID = ? AND PolicyMemberStartDate IS NOT NULL


MERGE_PM = INSERT INTO PolicyMember (POLICYVERSIONID, PolicyMemberVersionId, SubscriberStateCD, CREATEBY, LASTMODIFIEDBY) \
SELECT 	StagingPolicyMember.POLICYVERSIONID, PolicyMemberVersionId, StagingPolicyMember.SubscriberStateCD, ?, ? \
FROM StagingPolicyMember, StagingPolicyVersion, SBMFileInfo, SBMTransMsg \
WHERE   StagingPolicyMember.policyVersionId = StagingPolicyVersion.policyVersionId AND StagingPolicyVersion.sbmTransMsgId = SBMTransMsg.sbmTransMsgId \
AND SBMTransMsg.sbmFileInfoId = SBMFileInfo.sbmFileInfoId AND SBMFileInfo.SBMFileProcessingSummaryID = ?


VOID_POLICY_STATUS = INSERT INTO PolicyStatus ( \
    policyVersionId, transDateTime, insuranacePolicyStatusTypeCd, createBy, lastModifiedBy \
  ) \
( \
SELECT PV.policyVersionId, systimestamp, '6', 'Voidj81j82', 'Voidj81j82' \
FROM PolicyVersion PV, SBMFileInfo FI, SBMTransMsg TM \
  WHERE PV.sbmTransMsgId          = TM.sbmTransMsgId \
  AND TM.sbmFileInfoId                  = FI.sbmFileInfoId \
  AND FI.SBMFileProcessingSummaryID     = ?)


COPY_PRECEDING_POLICYVERSION = INSERT INTO PolicyVersion \
( \
POLICYVERSIONID,SUBSCRIBERSTATECD,EXCHANGEPOLICYID,MAINTENANCESTARTDATETIME,ISSUERPOLICYID, \
ISSUERHIOSID,ISSUERTAXPAYERID,ISSUERNM,ISSUERSUBSCRIBERID,EXCHANGEASSIGNEDSUBSCRIBERID,TRANSDATETIME,TRANSCONTROLNUM, \
ELIGIBILITYSTARTDATE,ELIGIBILITYENDDATE,SPECIALENROLLMENTPERIODREASONT,SOURCEEXCHANGEID,PREMIUMPAIDTOENDDATE, \
LASTPREMIUMPAIDDATE,PAYMENTTRANSID,COBRAQUALIFYINGEVENTDATE,PLANID,EMPLOYERGROUPNUM,X12INSRNCLINETYPECD, \
INSRNCAPLCTNTYPECD,EMPLOYERIDENTIFICATIONNUM,SPONSORNM,SPONSORSSN,SPONSOROTHERID,TRANSMSGID,X12COBRAQUALIFYINGEVENTTYPECD, \
AGENTTAXPAYERID,AGENTNM,AGENTNPNNUM,AGENTACCOUNTNUM,BROKERNM,BROKERNPNNUM,BROKERTAXPAYERID,BROKERACCOUNTNUM, \
X12EMPLOYMENTSTATUSTYPECD,CHANGEREPORTEDDATE,X12COVERAGELEVELTYPECD,X12TRANSTYPECD,CREATEDATETIME,LASTMODIFIEDDATETIME, \
CREATEBY,LASTMODIFIEDBY,POLICYSTARTDATE,POLICYENDDATE,SOURCEVERSIONID,SOURCEVERSIONDATETIME,HEALTHCOVGMAINTEFFECTIVEDATE, \
MARKETPLACEGROUPPOLICYID,SBMTRANSMSGID, priorPOLICYVERSIONID) \
SELECT PolicyVersionSeq.nextval, allpv.SUBSCRIBERSTATECD, allpv.EXCHANGEPOLICYID, systimestamp,allpv.ISSUERPOLICYID, \
allpv.ISSUERHIOSID,allpv.ISSUERTAXPAYERID,allpv.ISSUERNM,allpv.ISSUERSUBSCRIBERID,allpv.EXCHANGEASSIGNEDSUBSCRIBERID,allpv.TRANSDATETIME,allpv.TRANSCONTROLNUM, \
allpv.ELIGIBILITYSTARTDATE,allpv.ELIGIBILITYENDDATE,allpv.SPECIALENROLLMENTPERIODREASONT,allpv.SOURCEEXCHANGEID,allpv.PREMIUMPAIDTOENDDATE, \
allpv.LASTPREMIUMPAIDDATE,allpv.PAYMENTTRANSID,allpv.COBRAQUALIFYINGEVENTDATE,allpv.PLANID,allpv.EMPLOYERGROUPNUM,allpv.X12INSRNCLINETYPECD, \
allpv.INSRNCAPLCTNTYPECD,allpv.EMPLOYERIDENTIFICATIONNUM,allpv.SPONSORNM,allpv.SPONSORSSN,allpv.SPONSOROTHERID,allpv.TRANSMSGID,allpv.X12COBRAQUALIFYINGEVENTTYPECD, \
allpv.AGENTTAXPAYERID,allpv.AGENTNM,allpv.AGENTNPNNUM,allpv.AGENTACCOUNTNUM,allpv.BROKERNM,allpv.BROKERNPNNUM,allpv.BROKERTAXPAYERID,allpv.BROKERACCOUNTNUM, \
allpv.X12EMPLOYMENTSTATUSTYPECD,allpv.CHANGEREPORTEDDATE,allpv.X12COVERAGELEVELTYPECD,allpv.X12TRANSTYPECD,systimestamp,systimestamp, \
'InsertPVj83','InsertPVj83',allpv.POLICYSTARTDATE,allpv.POLICYENDDATE,allpv.SOURCEVERSIONID,allpv.SOURCEVERSIONDATETIME,allpv.HEALTHCOVGMAINTEFFECTIVEDATE, \
allpv.MARKETPLACEGROUPPOLICYID,allpv.sbmTransMsgId, allpv.oldVersionId \
FROM ( \
SELECT \
oldpv.SUBSCRIBERSTATECD,oldpv.EXCHANGEPOLICYID,systimestamp,oldpv.ISSUERPOLICYID, \
oldpv.ISSUERHIOSID,oldpv.ISSUERTAXPAYERID,oldpv.ISSUERNM,oldpv.ISSUERSUBSCRIBERID,oldpv.EXCHANGEASSIGNEDSUBSCRIBERID,oldpv.TRANSDATETIME,oldpv.TRANSCONTROLNUM, \
oldpv.ELIGIBILITYSTARTDATE,oldpv.ELIGIBILITYENDDATE,oldpv.SPECIALENROLLMENTPERIODREASONT,oldpv.SOURCEEXCHANGEID,oldpv.PREMIUMPAIDTOENDDATE, \
oldpv.LASTPREMIUMPAIDDATE,oldpv.PAYMENTTRANSID,oldpv.COBRAQUALIFYINGEVENTDATE,oldpv.PLANID,oldpv.EMPLOYERGROUPNUM,oldpv.X12INSRNCLINETYPECD, \
oldpv.INSRNCAPLCTNTYPECD,oldpv.EMPLOYERIDENTIFICATIONNUM,oldpv.SPONSORNM,oldpv.SPONSORSSN,oldpv.SPONSOROTHERID,oldpv.TRANSMSGID,oldpv.X12COBRAQUALIFYINGEVENTTYPECD, \
oldpv.AGENTTAXPAYERID,oldpv.AGENTNM,oldpv.AGENTNPNNUM,oldpv.AGENTACCOUNTNUM,oldpv.BROKERNM,oldpv.BROKERNPNNUM,oldpv.BROKERTAXPAYERID,oldpv.BROKERACCOUNTNUM, \
oldpv.X12EMPLOYMENTSTATUSTYPECD,oldpv.CHANGEREPORTEDDATE,oldpv.X12COVERAGELEVELTYPECD,oldpv.X12TRANSTYPECD,systimestamp,systimestamp, \
'InsertPVj83','InsertPVj83',oldpv.POLICYSTARTDATE,oldpv.POLICYENDDATE,oldpv.SOURCEVERSIONID,oldpv.SOURCEVERSIONDATETIME,oldpv.HEALTHCOVGMAINTEFFECTIVEDATE, \
oldpv.MARKETPLACEGROUPPOLICYID,oldpv.sbmTransMsgId, newpv.PolicyVersionId oldversionid, \
ROW_NUMBER( ) OVER (PARTITION BY oldpv.exchangePolicyId, oldpv.subscriberStateCd \
ORDER BY oldpv.maintenanceStartDateTime NULLS LAST) SRLNO \
FROM   PolicyVersion oldpv, \
       PolicyVersion newpv, \
       SBMFileInfo, \
       SBMTransMsg \
WHERE  oldpv.policyVersionId = newpv.priorPolicyVersionId \
AND    newpv.sbmTransMsgId = SBMTransMsg.sbmTransMsgId \
AND    SBMTransMsg.sbmFileInfoId = SBMFileInfo.sbmFileInfoId \
AND    SBMFileInfo.SBMFileProcessingSummaryID = ? \
AND    newpv.priorPolicyVersionId is not null \
AND    newpv.lastModifiedby != 'InsertPVj83') allpv \
WHERE   allpv.srlno = 1


COPY_POLICYVERSION = INSERT ALL \
INTO   PolicyVersion \
( \
POLICYVERSIONID,SUBSCRIBERSTATECD,EXCHANGEPOLICYID,MAINTENANCESTARTDATETIME,MAINTENANCEENDDATETIME,ISSUERPOLICYID, \
ISSUERHIOSID,ISSUERTAXPAYERID,ISSUERNM,ISSUERSUBSCRIBERID,EXCHANGEASSIGNEDSUBSCRIBERID,TRANSDATETIME,TRANSCONTROLNUM, \
ELIGIBILITYSTARTDATE,ELIGIBILITYENDDATE,SPECIALENROLLMENTPERIODREASONT,SOURCEEXCHANGEID,PREMIUMPAIDTOENDDATE, \
LASTPREMIUMPAIDDATE,PAYMENTTRANSID,COBRAQUALIFYINGEVENTDATE,PLANID,EMPLOYERGROUPNUM,X12INSRNCLINETYPECD, \
INSRNCAPLCTNTYPECD,EMPLOYERIDENTIFICATIONNUM,SPONSORNM,SPONSORSSN,SPONSOROTHERID,TRANSMSGID,X12COBRAQUALIFYINGEVENTTYPECD, \
AGENTTAXPAYERID,AGENTNM,AGENTNPNNUM,AGENTACCOUNTNUM,BROKERNM,BROKERNPNNUM,BROKERTAXPAYERID,BROKERACCOUNTNUM, \
X12EMPLOYMENTSTATUSTYPECD,CHANGEREPORTEDDATE,X12COVERAGELEVELTYPECD,X12TRANSTYPECD,CREATEDATETIME,LASTMODIFIEDDATETIME, \
CREATEBY,LASTMODIFIEDBY,POLICYSTARTDATE,POLICYENDDATE,SOURCEVERSIONID,SOURCEVERSIONDATETIME,HEALTHCOVGMAINTEFFECTIVEDATE, \
MARKETPLACEGROUPPOLICYID,SBMTRANSMSGID, priorPOLICYVERSIONID) \
VALUES \
( \
PolicyVersionSeq.nextval, SUBSCRIBERSTATECD,EXCHANGEPOLICYID,systimestamp, \
to_timestamp('31-DEC-9999 11.59.59.000000000 PM') ,ISSUERPOLICYID,  \
ISSUERHIOSID,ISSUERTAXPAYERID,ISSUERNM,ISSUERSUBSCRIBERID,EXCHANGEASSIGNEDSUBSCRIBERID,TRANSDATETIME,TRANSCONTROLNUM, \
ELIGIBILITYSTARTDATE,ELIGIBILITYENDDATE,SPECIALENROLLMENTPERIODREASONT,SOURCEEXCHANGEID,PREMIUMPAIDTOENDDATE, \
LASTPREMIUMPAIDDATE,PAYMENTTRANSID,COBRAQUALIFYINGEVENTDATE,PLANID,EMPLOYERGROUPNUM,X12INSRNCLINETYPECD, \
INSRNCAPLCTNTYPECD,EMPLOYERIDENTIFICATIONNUM,SPONSORNM,SPONSORSSN,SPONSOROTHERID,TRANSMSGID,X12COBRAQUALIFYINGEVENTTYPECD, \
AGENTTAXPAYERID,AGENTNM,AGENTNPNNUM,AGENTACCOUNTNUM,BROKERNM,BROKERNPNNUM,BROKERTAXPAYERID,BROKERACCOUNTNUM, \
X12EMPLOYMENTSTATUSTYPECD,CHANGEREPORTEDDATE,X12COVERAGELEVELTYPECD,X12TRANSTYPECD,systimestamp,systimestamp, \
'InsertPVj86','InsertPVj86',POLICYSTARTDATE,POLICYENDDATE,SOURCEVERSIONID,SOURCEVERSIONDATETIME,HEALTHCOVGMAINTEFFECTIVEDATE, \
MARKETPLACEGROUPPOLICYID,SBMTRANSMSGID, POLICYVERSIONID) \
INTO   PolicyStatus (policyVersionId, transDateTime, insuranacePolicyStatusTypeCd, createBy, lastModifiedBy) \
VALUES (PolicyVersionSeq.currval, systimestamp, '5', 'InsertPVj86', 'InsertPVj86') \
SELECT a.* \
FROM   PolicyVersion a, SBMFileInfo, SBMTransMsg \
WHERE  a.sbmTransMsgId = SBMTransMsg.sbmTransMsgId \
AND    SBMTransMsg.sbmFileInfoId = SBMFileInfo.sbmFileInfoId \
AND    SBMFileInfo.SBMFileProcessingSummaryID = ? \
AND    priorPolicyVersionId is null


COPY_PRECEDING_POLICYSTATUS = INSERT INTO PolicyStatus ( \
	POLICYVERSIONID, transDateTime, insuranacePolicyStatusTypeCd, CREATEBY, lastModifiedBy) \
select allpv.latestpvid, allpv.transDateTime, allpv.insuranacePolicyStatusTypeCd, 'InsertLatestPVj83', 'InsertLatestPVj83'  FROM ( \
select latestpv.policyVersionId latestPVID, newpv.policyVersionId, oldpv.policyVersionid, \
       ps.transDateTime, ps.insuranacePolicyStatusTypeCd, \
       ROW_NUMBER( ) OVER (PARTITION BY oldpv.exchangePolicyId, oldpv.subscriberStateCd \
ORDER BY oldpv.maintenanceStartDateTime, latestpv.policyVersionId desc  NULLS LAST) SRLNO \
FROM   PolicyStatus ps, \
       PolicyVersion newpv, \
       PolicyVersion oldpv, \
       PolicyVersion latestpv, \
       SBMFileInfo sfi, \
       SBMTransMsg stm \
WHERE  newpv.sbmTransMsgId = stm.sbmTransMsgId \
AND    stm.sbmFileInfoId = sfi.sbmFileInfoId \
AND    sfi.SBMFileProcessingSummaryID = ? \
AND    oldpv.PolicyVersionId = ps.policyVersionId \
AND    newpv.priorPolicyVersionId = oldpv.policyVersionId \
AND    newpv.policyVersionId = latestpv.priorPolicyVersionId \
AND    latestpv.maintenanceStartDateTime != latestpv.maintenanceEndDateTime \
) allpv


COPY_POLICY_STATUS_HISTORY = INSERT INTO PolicyStatus ( \
	POLICYVERSIONID, transDateTime, insuranacePolicyStatusTypeCd, CREATEBY, lastModifiedBy) \
SELECT newpv.policyVersionId, s.transDateTime, s.insuranacePolicyStatusTypeCd, 'InsertLatestPVj86', 'InsertLatestPVj86' \
FROM   PolicyVersion a, \
       PolicyVersion newpv, \
       PolicyStatus s, \
       SBMFileInfo, \
       SBMTransMsg \
WHERE  a.sbmTransMsgId = SBMTransMsg.sbmTransMsgId \
AND    SBMTransMsg.sbmFileInfoId = SBMFileInfo.sbmFileInfoId \
AND    SBMFileInfo.SBMFileProcessingSummaryID = ? \
AND    a.policyVersionId = s.policyVersionId \
AND    a.policyVersionId = newpv.PRIORPOLICYVERSIONID \
AND    newpv.maintenanceStartDateTime != newpv.maintenanceEndDateTime \
AND    a.priorPolicyVersionId is null


UPDATE_MAINTDATETIME_VOID = MERGE INTO PolicyVersion dpv \
USING ( \
select newpv.policyVersionId, (newpv.maintenanceStartDateTime) newdate, \
       ROW_NUMBER( ) OVER (PARTITION BY newpv.exchangePolicyId, newpv.subscriberStateCd \
ORDER BY newpv.maintenanceStartDateTime NULLS LAST) SRLNO \
FROM   PolicyVersion newpv, \
       SBMFileInfo sfi, \
       SBMTransMsg stm \
WHERE  newpv.sbmTransMsgId = stm.sbmTransMsgId \
AND    stm.sbmFileInfoId = sfi.sbmFileInfoId \
AND    sfi.SBMFileProcessingSummaryID = ? \
AND    NOT EXISTS ( \
SELECT 1 \
FROM   PolicyStatus ps \
WHERE  ps.insuranacePolicyStatusTypeCd = '5' \
and    ps.policyVersionId = newpv.policyVersionId) \
) qpv \
ON    (dpv.policyVersionId = qpv.policyVersionId) \
WHEN   MATCHED THEN UPDATE SET \
dpv.maintenanceEndDateTime = newdate, \
dpv.lastModifiedBy = 'NewUpdatepv', dpv.LASTMODIFIEDDATETIME = systimestamp


UPDATE_MAINTDATETIME_PRECEDING = MERGE INTO PolicyVersion dpv \
USING ( \
select oldpv.policyVersionId, (latestpv.maintenanceStartDateTime-INTERVAL '0.001000' SECOND) newdate \
FROM   PolicyVersion newpv, \
       PolicyVersion oldpv, \
       PolicyVersion latestpv, \
       SBMFileInfo sfi, \
       SBMTransMsg stm \
WHERE  newpv.sbmTransMsgId = stm.sbmTransMsgId \
AND    oldpv.sbmTransMsgId = latestpv.sbmTransMsgId \
AND    stm.sbmFileInfoId = sfi.sbmFileInfoId \
AND    sfi.SBMFileProcessingSummaryID = ? \
AND    newpv.priorPolicyVersionId = oldpv.policyVersionId \
AND    latestpv.priorPolicyVersionId = newpv.policyVersionId) qpv \
ON    (dpv.policyVersionId = qpv.policyVersionId) \
WHEN   MATCHED THEN UPDATE SET \
dpv.maintenanceEndDateTime = newdate, \
dpv.lastModifiedBy = 'UpdateLatestpvj83', dpv.LASTMODIFIEDDATETIME = systimestamp


COPY_POLICYPREMIUM = INSERT INTO PolicyPremium ( \
	POLICYVERSIONID, \
	EFFECTIVESTARTDATE, \
	EFFECTIVEENDDATE, \
	TOTALPREMIUMAMOUNT, \
	OTHERPAYMENTAMOUNT2, \
	EXCHANGERATEAREA, \
	INDIVIDUALRESPONSIBLEAMOUNT, \
	CSRAMOUNT, \
	OTHERPAYMENTAMOUNT1, \
	APTCAMOUNT, \
	PRORATEDPREMIUMAMOUNT, \
	PRORATEDAPTCAMOUNT, \
	PRORATEDCSRAMOUNT, \
	INSRNCPLANVARIANTCMPTTYPECD, \
	CREATEBY, \
    lastModifiedBy) \
SELECT 	newpv.POLICYVERSIONID, \
	EFFECTIVESTARTDATE, \
	EFFECTIVEENDDATE, \
	pp.TOTALPREMIUMAMOUNT, \
	pp.OTHERPAYMENTAMOUNT2, \
	pp.EXCHANGERATEAREA, \
	pp.INDIVIDUALRESPONSIBLEAMOUNT, \
	pp.CSRAMOUNT, \
	pp.OTHERPAYMENTAMOUNT1, \
	pp.APTCAMOUNT, \
	pp.PRORATEDPREMIUMAMOUNT, \
    pp.PRORATEDAPTCAMOUNT, \
	pp.PRORATEDCSRAMOUNT, \
	pp.INSRNCPLANVARIANTCMPTTYPECD, \
	?, \
    ? \
FROM    PolicyPremium pp, \
        PolicyVersion oldpv, \
        PolicyVersion newpv, \
        SBMFileInfo, \
        SBMTransMsg \
WHERE   NVL(oldpv.priorPolicyVersionId, oldpv.PolicyVersionId) = pp.policyVersionId \
AND     newpv.maintenanceStartDateTime != newpv.maintenanceEndDateTime \
AND     oldpv.sbmTransMsgId = SBMTransMsg.sbmTransMsgId \
AND     newpv.priorPolicyVersionId = oldpv.policyVersionId \
AND     SBMTransMsg.sbmFileInfoId = SBMFileInfo.sbmFileInfoId \
AND     SBMFileInfo.SBMFileProcessingSummaryID = ?

 
COPY_POLICYMEMBER = INSERT INTO PolicyMember ( \
	POLICYVERSIONID, policyMemberVersionId, CREATEBY, lastModifiedBy, subscriberStateCd) \
SELECT 	newpv.POLICYVERSIONID, policyMemberVersionId, ?, ?, pm.subscriberStateCd \
FROM    PolicyMember pm, \
        PolicyVersion oldpv, \
        PolicyVersion newpv, \
        SBMFileInfo, \
        SBMTransMsg \
WHERE   NVL(oldpv.priorPolicyVersionId,oldpv.POLICYVERSIONID) = pm.policyVersionId \
AND     newpv.maintenanceStartDateTime != newpv.maintenanceEndDateTime \
AND     oldpv.sbmTransMsgId = SBMTransMsg.sbmTransMsgId \
AND     newpv.priorPolicyVersionId = oldpv.policyVersionId \
AND     SBMTransMsg.sbmFileInfoId = SBMFileInfo.sbmFileInfoId \
AND     SBMFileInfo.SBMFileProcessingSummaryID = ?

