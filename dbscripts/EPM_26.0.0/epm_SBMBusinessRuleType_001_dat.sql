set SERVEROUTPUT ON FORMAT WRAPPED
set APPINFO ON
SET VERIFY OFF

SET FEEDBACK OFF
SET TERMOUT OFF

column date_column new_value today_var
column scriptname new_value thescriptname;
column sessionname new_value sessionname;
column dbname new_value dbname;
select 
	SUBSTR(sys_context('USERENV', 'MODULE'), instr(sys_context('USERENV', 'MODULE'), ' ') +1) || '_' || to_char(sysdate, 'yyyymmdd') date_column,
  	sys_context('USERENV', 'MODULE') scriptname,
	sys_context('USERENV','SESSION_USER') sessionname,
	sys_context('USERENV','DB_NAME') dbname
from dual;
  
SPOOL &today_var..log

SET VERIFY ON
SET FEEDBACK ON
SET TERMOUT On
SET ECHO ON 

insert into appdba_util.scriptinventory (
SCRIPTNAME,
CREATEDATE,
SCHEMANAME,
DATABASE,
ROLLBACKIND,
FAILUREIND,
localGlobalInd)
values
('&thescriptname',
 sysdate,
 '&sessionname',
 '&dbname',
 'N',
 'N',
 'G');
commit;

MERGE INTO SBMBusinessRuleType using dual ON ( SBMBusinessRuleTypeCd = 'R001') when matched then update set SBMBusinessRuleTypeNm='Validate for financial date overlaps on the parent node' ,SBMBusinessRuleTypeDesc = 'Validate for financial date overlaps on the parent node'  When not matched then insert(SBMBusinessRuleTypeCd,SBMBusinessRuleTypeNm ,  SBMBusinessRuleTypeDesc) values ('R001','Validate for financial date overlaps on the parent node','Validate for financial date overlaps on the parent node');
MERGE INTO SBMBusinessRuleType using dual ON ( SBMBusinessRuleTypeCd = 'R002') when matched then update set SBMBusinessRuleTypeNm='Validate for financial date gaps on the parent node' ,SBMBusinessRuleTypeDesc = 'Validate for financial date gaps on the parent node'  When not matched then insert(SBMBusinessRuleTypeCd,SBMBusinessRuleTypeNm ,  SBMBusinessRuleTypeDesc) values ('R002','Validate for financial date gaps on the parent node','Validate for financial date gaps on the parent node');
MERGE INTO SBMBusinessRuleType using dual ON ( SBMBusinessRuleTypeCd = 'R003') when matched then update set SBMBusinessRuleTypeNm='Validate for earliest financial start date equal to policy start' ,SBMBusinessRuleTypeDesc = 'Validate for earliest financial start date equal to policy start'  When not matched then insert(SBMBusinessRuleTypeCd,SBMBusinessRuleTypeNm ,  SBMBusinessRuleTypeDesc) values ('R003','Validate for earliest financial start date equal to policy start','Validate for earliest financial start date equal to policy start');
MERGE INTO SBMBusinessRuleType using dual ON ( SBMBusinessRuleTypeCd = 'R004') when matched then update set SBMBusinessRuleTypeNm='Validate for latest financial end date eqial to policy end' ,SBMBusinessRuleTypeDesc = 'Validate for latest financial end date eqial to policy end'  When not matched then insert(SBMBusinessRuleTypeCd,SBMBusinessRuleTypeNm ,  SBMBusinessRuleTypeDesc) values ('R004','Validate for latest financial end date eqial to policy end','Validate for latest financial end date eqial to policy end');
MERGE INTO SBMBusinessRuleType using dual ON ( SBMBusinessRuleTypeCd = 'R005') when matched then update set SBMBusinessRuleTypeNm='Validate for latest financial end date month equal to policy end date month' ,SBMBusinessRuleTypeDesc = 'Validate for latest financial end date month equal to policy end date month'  When not matched then insert(SBMBusinessRuleTypeCd,SBMBusinessRuleTypeNm ,  SBMBusinessRuleTypeDesc) values ('R005','Validate for latest financial end date month equal to policy end date month','Validate for latest financial end date month equal to policy end date month');
MERGE INTO SBMBusinessRuleType using dual ON ( SBMBusinessRuleTypeCd = 'R006') when matched then update set SBMBusinessRuleTypeNm='Validate for earliest financial start to be no more one month of the policy start (colorado)' ,SBMBusinessRuleTypeDesc = 'Validate for earliest financial start to be no more one month of the policy start (colorado)'  When not matched then insert(SBMBusinessRuleTypeCd,SBMBusinessRuleTypeNm ,  SBMBusinessRuleTypeDesc) values ('R006','Validate for earliest financial start to be no more one month of the policy start (colorado)','Validate for earliest financial start to be no more one month of the policy start (colorado)');
MERGE INTO SBMBusinessRuleType using dual ON ( SBMBusinessRuleTypeCd = 'R007') when matched then update set SBMBusinessRuleTypeNm='Validate for earliest financial start not to be less than the policy start (colorado)' ,SBMBusinessRuleTypeDesc = 'Validate for earliest financial start not to be less than the policy start (colorado)'  When not matched then insert(SBMBusinessRuleTypeCd,SBMBusinessRuleTypeNm ,  SBMBusinessRuleTypeDesc) values ('R007','Validate for earliest financial start not to be less than the policy start (colorado)','Validate for earliest financial start not to be less than the policy start (colorado)');
MERGE INTO SBMBusinessRuleType using dual ON ( SBMBusinessRuleTypeCd = 'R008') when matched then update set SBMBusinessRuleTypeNm='Validate for financial start date to be less than or equal to the policy end date for effectuated policies' ,SBMBusinessRuleTypeDesc = 'Validate for financial start date to be less than or equal to the policy end date for effectuated policies'  When not matched then insert(SBMBusinessRuleTypeCd,SBMBusinessRuleTypeNm ,  SBMBusinessRuleTypeDesc) values ('R008','Validate for financial start date to be less than or equal to the policy end date for effectuated policies','Validate for financial start date to be less than or equal to the policy end date for effectuated policies');
MERGE INTO SBMBusinessRuleType using dual ON ( SBMBusinessRuleTypeCd = 'R009') when matched then update set SBMBusinessRuleTypeNm='Validate that the Monthly APTC amount does not exceed the Monthly Total Premium amount' ,SBMBusinessRuleTypeDesc = 'Validate that the Monthly APTC amount does not exceed the Monthly Total Premium amount'  When not matched then insert(SBMBusinessRuleTypeCd,SBMBusinessRuleTypeNm ,  SBMBusinessRuleTypeDesc) values ('R009','Validate that the Monthly APTC amount does not exceed the Monthly Total Premium amount','Validate that the Monthly APTC amount does not exceed the Monthly Total Premium amount');
MERGE INTO SBMBusinessRuleType using dual ON ( SBMBusinessRuleTypeCd = 'R010') when matched then update set SBMBusinessRuleTypeNm='Validate that the Total Premium amount is equal to the sum of MTIRA + MAPTC + MOP1 + MOP2' ,SBMBusinessRuleTypeDesc = 'Validate that the Total Premium amount is equal to the sum of MTIRA + MAPTC + MOP1 + MOP2'  When not matched then insert(SBMBusinessRuleTypeCd,SBMBusinessRuleTypeNm ,  SBMBusinessRuleTypeDesc) values ('R010','Validate that the Total Premium amount is equal to the sum of MTIRA + MAPTC + MOP1 + MOP2','Validate that the Total Premium amount is equal to the sum of MTIRA + MAPTC + MOP1 + MOP2');
MERGE INTO SBMBusinessRuleType using dual ON ( SBMBusinessRuleTypeCd = 'R011') when matched then update set SBMBusinessRuleTypeNm='Validate that the Variant ID is 02-06 when Monthly CSR amount is provided' ,SBMBusinessRuleTypeDesc = 'Validate that the Variant ID is 02-06 when Monthly CSR amount is provided'  When not matched then insert(SBMBusinessRuleTypeCd,SBMBusinessRuleTypeNm ,  SBMBusinessRuleTypeDesc) values ('R011','Validate that the Variant ID is 02-06 when Monthly CSR amount is provided','Validate that the Variant ID is 02-06 when Monthly CSR amount is provided');
MERGE INTO SBMBusinessRuleType using dual ON ( SBMBusinessRuleTypeCd = 'R012') when matched then update set SBMBusinessRuleTypeNm='Validated that the Variant ID is 01 when Monthly CSR amount is not provided' ,SBMBusinessRuleTypeDesc = 'Validated that the Variant ID is 01 when Monthly CSR amount is not provided'  When not matched then insert(SBMBusinessRuleTypeCd,SBMBusinessRuleTypeNm ,  SBMBusinessRuleTypeDesc) values ('R012','Validated that the Variant ID is 01 when Monthly CSR amount is not provided','Validated that the Variant ID is 01 when Monthly CSR amount is not provided');
MERGE INTO SBMBusinessRuleType using dual ON ( SBMBusinessRuleTypeCd = 'R013') when matched then update set SBMBusinessRuleTypeNm='Validate that the amount is equal to 0 if the Variant ID is 01 and the Monthly CSR amount is present' ,SBMBusinessRuleTypeDesc = 'Validate that the amount is equal to 0 if the Variant ID is 01 and the Monthly CSR amount is present'  When not matched then insert(SBMBusinessRuleTypeCd,SBMBusinessRuleTypeNm ,  SBMBusinessRuleTypeDesc) values ('R013','Validate that the amount is equal to 0 if the Variant ID is 01 and the Monthly CSR amount is present','Validate that the amount is equal to 0 if the Variant ID is 01 and the Monthly CSR amount is present');
MERGE INTO SBMBusinessRuleType using dual ON ( SBMBusinessRuleTypeCd = 'R014') when matched then update set SBMBusinessRuleTypeNm='Validate that the QHPID is valid for silver plan when CSR variant id is 04-06' ,SBMBusinessRuleTypeDesc = 'Validate that the QHPID is valid for silver plan when CSR variant id is 04-06'  When not matched then insert(SBMBusinessRuleTypeCd,SBMBusinessRuleTypeNm ,  SBMBusinessRuleTypeDesc) values ('R014','Validate that the QHPID is valid for silver plan when CSR variant id is 04-06','Validate that the QHPID is valid for silver plan when CSR variant id is 04-06');
MERGE INTO SBMBusinessRuleType using dual ON ( SBMBusinessRuleTypeCd = 'R015') when matched then update set SBMBusinessRuleTypeNm='Validate the provided Monthly CSR amount matches the system calculated Monthly CSR Amount' ,SBMBusinessRuleTypeDesc = 'Validate the provided Monthly CSR amount matches the system calculated Monthly CSR Amount'  When not matched then insert(SBMBusinessRuleTypeCd,SBMBusinessRuleTypeNm ,  SBMBusinessRuleTypeDesc) values ('R015','Validate the provided Monthly CSR amount matches the system calculated Monthly CSR Amount','Validate the provided Monthly CSR amount matches the system calculated Monthly CSR Amount');
MERGE INTO SBMBusinessRuleType using dual ON ( SBMBusinessRuleTypeCd = 'R016') when matched then update set SBMBusinessRuleTypeNm='Validate for partial month overlap dates on the prorated node from one parent node to another for the same month' ,SBMBusinessRuleTypeDesc = 'Validate for partial month overlap dates on the prorated node from one parent node to another for the same month'  When not matched then insert(SBMBusinessRuleTypeCd,SBMBusinessRuleTypeNm ,  SBMBusinessRuleTypeDesc) values ('R016','Validate for partial month overlap dates on the prorated node from one parent node to another for the same month','Validate for partial month overlap dates on the prorated node from one parent node to another for the same month');
MERGE INTO SBMBusinessRuleType using dual ON ( SBMBusinessRuleTypeCd = 'R017') when matched then update set SBMBusinessRuleTypeNm='Validate for  partial month gap dates on the prorated node from one parent node to another for the same month' ,SBMBusinessRuleTypeDesc = 'Validate for  partial month gap dates on the prorated node from one parent node to another for the same month'  When not matched then insert(SBMBusinessRuleTypeCd,SBMBusinessRuleTypeNm ,  SBMBusinessRuleTypeDesc) values ('R017','Validate for  partial month gap dates on the prorated node from one parent node to another for the same month','Validate for  partial month gap dates on the prorated node from one parent node to another for the same month');
MERGE INTO SBMBusinessRuleType using dual ON ( SBMBusinessRuleTypeCd = 'R018') when matched then update set SBMBusinessRuleTypeNm='Validate that each partial month dates on the prorated node are tied to either the financial start date or fiananical end date of the parent node for the same month' ,SBMBusinessRuleTypeDesc = 'Validate that each partial month dates on the prorated node are tied to either the financial start date or fiananical end date of the parent node for the same month'  When not matched then insert(SBMBusinessRuleTypeCd,SBMBusinessRuleTypeNm ,  SBMBusinessRuleTypeDesc) values ('R018','Validate that each partial month dates on the prorated node are tied to either the financial start date or fiananical end date of the parent node for the same month','Validate that each partial month dates on the prorated node are tied to either the financial start date or fiananical end date of the parent node for the same month');
MERGE INTO SBMBusinessRuleType using dual ON ( SBMBusinessRuleTypeCd = 'R019') when matched then update set SBMBusinessRuleTypeNm='Validate for the second part of the prorated amount when the parent financial node has the monthly amount and the first part of the prorated node is provided on the previous parent financial node' ,SBMBusinessRuleTypeDesc = 'Validate for the second part of the prorated amount when the parent financial node has the monthly amount and the first part of the prorated node is provided on the previous parent financial node'  When not matched then insert(SBMBusinessRuleTypeCd,SBMBusinessRuleTypeNm ,  SBMBusinessRuleTypeDesc) values ('R019','Validate for the second part of the prorated amount when the parent financial node has the monthly amount and the first part of the prorated node is provided on the previous parent financial node','Validate for the second part of the prorated amount when the parent financial node has the monthly amount and the first part of the prorated node is provided on the previous parent financial node');
MERGE INTO SBMBusinessRuleType using dual ON ( SBMBusinessRuleTypeCd = 'R020') when matched then update set SBMBusinessRuleTypeNm='Validate for the first part of the prorated amount when the parent financial node has the monthly amount and the second part of the prorated node is provided on the subsequent parent financial node' ,SBMBusinessRuleTypeDesc = 'Validate for the first part of the prorated amount when the parent financial node has the monthly amount and the second part of the prorated node is provided on the subsequent parent financial node'  When not matched then insert(SBMBusinessRuleTypeCd,SBMBusinessRuleTypeNm ,  SBMBusinessRuleTypeDesc) values ('R020','Validate for the first part of the prorated amount when the parent financial node has the monthly amount and the second part of the prorated node is provided on the subsequent parent financial node','Validate for the first part of the prorated amount when the parent financial node has the monthly amount and the second part of the prorated node is provided on the subsequent parent financial node');
MERGE INTO SBMBusinessRuleType using dual ON ( SBMBusinessRuleTypeCd = 'R021') when matched then update set SBMBusinessRuleTypeNm='Validate that the partial month start date is greater than or equal to the financial start date of the parent node' ,SBMBusinessRuleTypeDesc = 'Validate that the partial month start date is greater than or equal to the financial start date of the parent node'  When not matched then insert(SBMBusinessRuleTypeCd,SBMBusinessRuleTypeNm ,  SBMBusinessRuleTypeDesc) values ('R021','Validate that the partial month start date is greater than or equal to the financial start date of the parent node','Validate that the partial month start date is greater than or equal to the financial start date of the parent node');
MERGE INTO SBMBusinessRuleType using dual ON ( SBMBusinessRuleTypeCd = 'R022') when matched then update set SBMBusinessRuleTypeNm='Validate that the partial month end date is less than or equal to the fianancial end date of the parent node' ,SBMBusinessRuleTypeDesc = 'Validate that the partial month end date is less than or equal to the fianancial end date of the parent node'  When not matched then insert(SBMBusinessRuleTypeCd,SBMBusinessRuleTypeNm ,  SBMBusinessRuleTypeDesc) values ('R022','Validate that the partial month end date is less than or equal to the fianancial end date of the parent node','Validate that the partial month end date is less than or equal to the fianancial end date of the parent node');
MERGE INTO SBMBusinessRuleType using dual ON ( SBMBusinessRuleTypeCd = 'R023') when matched then update set SBMBusinessRuleTypeNm='Validate for same month across multiple prorated nodes under one parent financial node ' ,SBMBusinessRuleTypeDesc = 'Validate for same month across multiple prorated nodes under one parent financial node '  When not matched then insert(SBMBusinessRuleTypeCd,SBMBusinessRuleTypeNm ,  SBMBusinessRuleTypeDesc) values ('R023','Validate for same month across multiple prorated nodes under one parent financial node ','Validate for same month across multiple prorated nodes under one parent financial node ');
MERGE INTO SBMBusinessRuleType using dual ON ( SBMBusinessRuleTypeCd = 'R024') when matched then update set SBMBusinessRuleTypeNm='Validate for prorated nodes that span multiple months' ,SBMBusinessRuleTypeDesc = 'Validate for prorated nodes that span multiple months'  When not matched then insert(SBMBusinessRuleTypeCd,SBMBusinessRuleTypeNm ,  SBMBusinessRuleTypeDesc) values ('R024','Validate for prorated nodes that span multiple months','Validate for prorated nodes that span multiple months');
MERGE INTO SBMBusinessRuleType using dual ON ( SBMBusinessRuleTypeCd = 'R025') when matched then update set SBMBusinessRuleTypeNm='Validate for PartialPremiumAmount less than or equal to MonthlyTotalPremiumAmount' ,SBMBusinessRuleTypeDesc = 'Validate for PartialPremiumAmount less than or equal to MonthlyTotalPremiumAmount'  When not matched then insert(SBMBusinessRuleTypeCd,SBMBusinessRuleTypeNm ,  SBMBusinessRuleTypeDesc) values ('R025','Validate for PartialPremiumAmount less than or equal to MonthlyTotalPremiumAmount','Validate for PartialPremiumAmount less than or equal to MonthlyTotalPremiumAmount');
MERGE INTO SBMBusinessRuleType using dual ON ( SBMBusinessRuleTypeCd = 'R026') when matched then update set SBMBusinessRuleTypeNm='Validate for PartialMonthAPTCAmount less than or equal to MonthlyAPTC when PartialMonthAPTC exists.' ,SBMBusinessRuleTypeDesc = 'Validate for PartialMonthAPTCAmount less than or equal to MonthlyAPTC when PartialMonthAPTC exists.'  When not matched then insert(SBMBusinessRuleTypeCd,SBMBusinessRuleTypeNm ,  SBMBusinessRuleTypeDesc) values ('R026','Validate for PartialMonthAPTCAmount less than or equal to MonthlyAPTC when PartialMonthAPTC exists.','Validate for PartialMonthAPTCAmount less than or equal to MonthlyAPTC when PartialMonthAPTC exists.');
MERGE INTO SBMBusinessRuleType using dual ON ( SBMBusinessRuleTypeCd = 'R027') when matched then update set SBMBusinessRuleTypeNm='Validate for PartialMonthAPTCAmount less than or equal to the PartialMonthPremiumAmount when PartialMonthAPTC exists' ,SBMBusinessRuleTypeDesc = 'Validate for PartialMonthAPTCAmount less than or equal to the PartialMonthPremiumAmount when PartialMonthAPTC exists'  When not matched then insert(SBMBusinessRuleTypeCd,SBMBusinessRuleTypeNm ,  SBMBusinessRuleTypeDesc) values ('R027','Validate for PartialMonthAPTCAmount less than or equal to the PartialMonthPremiumAmount when PartialMonthAPTC exists','Validate for PartialMonthAPTCAmount less than or equal to the PartialMonthPremiumAmount when PartialMonthAPTC exists');
MERGE INTO SBMBusinessRuleType using dual ON ( SBMBusinessRuleTypeCd = 'R028') when matched then update set SBMBusinessRuleTypeNm='Validate for MonthlyAPTCAmount does not exceed the PartialMonthPRemiumAmount when PartialMonthAPTC is not provided' ,SBMBusinessRuleTypeDesc = 'Validate for MonthlyAPTCAmount does not exceed the PartialMonthPRemiumAmount when PartialMonthAPTC is not provided'  When not matched then insert(SBMBusinessRuleTypeCd,SBMBusinessRuleTypeNm ,  SBMBusinessRuleTypeDesc) values ('R028','Validate for MonthlyAPTCAmount does not exceed the PartialMonthPRemiumAmount when PartialMonthAPTC is not provided','Validate for MonthlyAPTCAmount does not exceed the PartialMonthPRemiumAmount when PartialMonthAPTC is not provided');
MERGE INTO SBMBusinessRuleType using dual ON ( SBMBusinessRuleTypeCd = 'R029') when matched then update set SBMBusinessRuleTypeNm='Validate CSRVariantID is 01 when PartialMonthCSRAmount is not provided' ,SBMBusinessRuleTypeDesc = 'Validate CSRVariantID is 01 when PartialMonthCSRAmount is not provided'  When not matched then insert(SBMBusinessRuleTypeCd,SBMBusinessRuleTypeNm ,  SBMBusinessRuleTypeDesc) values ('R029','Validate CSRVariantID is 01 when PartialMonthCSRAmount is not provided','Validate CSRVariantID is 01 when PartialMonthCSRAmount is not provided');
MERGE INTO SBMBusinessRuleType using dual ON ( SBMBusinessRuleTypeCd = 'R030') when matched then update set SBMBusinessRuleTypeNm='Validate CSRVariantID is 02-06 when PartialMonthCSRAmount is provided' ,SBMBusinessRuleTypeDesc = 'Validate CSRVariantID is 02-06 when PartialMonthCSRAmount is provided'  When not matched then insert(SBMBusinessRuleTypeCd,SBMBusinessRuleTypeNm ,  SBMBusinessRuleTypeDesc) values ('R030','Validate CSRVariantID is 02-06 when PartialMonthCSRAmount is provided','Validate CSRVariantID is 02-06 when PartialMonthCSRAmount is provided');
MERGE INTO SBMBusinessRuleType using dual ON ( SBMBusinessRuleTypeCd = 'R031') when matched then update set SBMBusinessRuleTypeNm='Validate that the amount is 0 when the PartialMonthCSRAmount is provided and the CSRVariantID is 01' ,SBMBusinessRuleTypeDesc = 'Validate that the amount is 0 when the PartialMonthCSRAmount is provided and the CSRVariantID is 01'  When not matched then insert(SBMBusinessRuleTypeCd,SBMBusinessRuleTypeNm ,  SBMBusinessRuleTypeDesc) values ('R031','Validate that the amount is 0 when the PartialMonthCSRAmount is provided and the CSRVariantID is 01','Validate that the amount is 0 when the PartialMonthCSRAmount is provided and the CSRVariantID is 01');
MERGE INTO SBMBusinessRuleType using dual ON ( SBMBusinessRuleTypeCd = 'R032') when matched then update set SBMBusinessRuleTypeNm='Validate that the PartialMonthCSRAmount provided matches the system calculated PartialMonthCSRAmount' ,SBMBusinessRuleTypeDesc = 'Validate that the PartialMonthCSRAmount provided matches the system calculated PartialMonthCSRAmount'  When not matched then insert(SBMBusinessRuleTypeCd,SBMBusinessRuleTypeNm ,  SBMBusinessRuleTypeDesc) values ('R032','Validate that the PartialMonthCSRAmount provided matches the system calculated PartialMonthCSRAmount','Validate that the PartialMonthCSRAmount provided matches the system calculated PartialMonthCSRAmount');


spool off
